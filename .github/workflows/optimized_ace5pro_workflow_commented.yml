name: ace5pro加入afdo(其它目的) # 工作流名称，描述其主要目的

on: # 定义工作流触发事件
  workflow_dispatch: # 允许手动触发工作流，并定义输入参数
    inputs: # 工作流的输入参数定义
      CPU: # CPU类型，例如sm8750
        description: "分支" # 参数描述
        required: true # 必填项
        default: 'sm8750' # 默认值
      FEIL: # 配置文件名称，例如oneplus_ace5_pro
        description: "配置文件" # 参数描述
        required: true # 必填项
        default: 'oneplus_ace5_pro' # 默认值
      ANDROID_VERSION: # 内核安卓版本，例如android15
        description: "内核安卓版本" # 参数描述
        required: true # 必填项
        default: 'android15' # 默认值
      KERNEL_VERSION: # 内核版本，例如6.6
        description: "内核版本" # 参数描述
        required: true # 必填项
        default: '6.6' # 默认值
      KERNEL_NAME: # 修改后的内核名称后缀
        description: "修改内核名称" # 参数描述
        required: true # 必填项
        default: '-android15-8-g013ec21bba94-abogki383916444' # 默认值
      ENABLE_KPM: # 是否启用KPM (Kernel Patch Management)
        description: "启用kpm" # 参数描述
        required: false # 可选项
        default: false # 默认不启用
        type: boolean # 参数类型为布尔值
      local_version: # 内核后缀名，例如-v8
        description: '输入内核后缀名（如-v8）' # 参数描述
        required: false # 可选项
        default: '-4k' # 默认值
        type: string # 参数类型为字符串
      kernel_time: # 内核构建时间（UTC 时间字符串）
        description: '内核构建时间（UTC 时间字符串，例如 "Tue Dec 17 23:36:49 UTC 2024"）' # 参数描述
        required: false # 可选项
        default: 'Tue Dec 17 23:36:49 UTC 2024' # 默认值
        type: string # 参数类型为字符串
      ENABLE_LTO: # 是否启用LTO (Link Time Optimization)
        description: '启用 LTO' # 参数描述
        required: false # 可选项
        default: false # 默认不启用
        type: boolean # 参数类型为布尔值

jobs: # 定义工作流中的作业
  build: # 定义名为 'build' 的作业
    runs-on: ubuntu-latest # 指定作业运行的操作系统环境
    env: # 定义作业级别的环境变量
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion" # CCACHE编译器检查配置
      CCACHE_NOHASHDIR: "true" # CCACHE不哈希目录
      CCACHE_HARDLINK: "true" # CCACHE使用硬链接
      TOKEN: ${{ secrets.TOKEN }} # GitHub Token，用于私有仓库访问等
    steps: # 定义作业中执行的步骤序列
      # 1. 环境准备与依赖安装
      - name: Maximize build space # 步骤名称：最大化构建空间
        uses: easimon/maximize-build-space@master # 使用第三方Action来清理Runner空间
        with: # Action的输入参数
          root-reserve-mb: 8192 # 根目录保留空间
          temp-reserve-mb: 2048 # 临时目录保留空间
          remove-dotnet: 'true' # 移除.NET相关组件
          remove-android: 'true' # 移除Android相关组件
          remove-haskell: 'true' # 移除Haskell相关组件
          remove-codeql: 'true' # 移除CodeQL相关组件
          
      - name: Configure Git # 步骤名称：配置Git
        run: | # 执行多行shell命令
          git config --global user.name "build" # 设置Git全局用户名
          git config --global user.email "3620603668@qq.com" # 设置Git全局用户邮箱

      - name: Install Dependencies # 步骤名称：安装构建依赖
        run: | # 执行多行shell命令
          sudo apt-get update # 更新apt包列表
          sudo apt-get install -y python3 git curl ccache libelf-dev # 安装必要的依赖包

      - name: Install repo tool # 步骤名称：安装repo工具
        run: | # 执行多行shell命令
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo # 下载repo工具
          chmod a+x ~/repo # 赋予执行权限
          sudo mv ~/repo /usr/local/bin/repo # 将repo工具移动到PATH路径下

      # 2. Ccache 配置与恢复
      - name: Restore ccache # 步骤名称：恢复ccache缓存
        uses: actions/cache@v4 # 使用GitHub Actions缓存Action
        with: # Action的输入参数
          path: /home/runner/.ccache # 缓存路径
          key: ${{ runner.os }}-${{ github.repository }}-v2 # 缓存键，用于唯一标识缓存
          restore-keys: | # 恢复缓存的备用键
            ${{ runner.os }}-${{ github.repository }}-
            ${{ runner.os }}-
            ccache-

      - name: Setup ccache environment # 步骤名称：设置ccache环境变量
        run: | # 执行多行shell命令
          echo "CCACHE_DIR=/home/runner/.ccache" >> $GITHUB_ENV # 设置ccache缓存目录
          echo "CCACHE_MAXSIZE=8G" >> $GITHUB_ENV # 设置ccache最大缓存大小
          echo "CCACHE_COMPILERCHECK=%compiler% -dumpmachine; %compiler% -dumpversion" >> $GITHUB_ENV # CCACHE编译器检查配置
          echo "CCACHE_NOHASHDIR=true" >> $GITHUB_ENV # CCACHE不哈希目录
          echo "CCACHE_HARDLINK=true" >> $GITHUB_ENV # CCACHE使用硬链接
          echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV # 设置ccache基础目录
          echo "CCACHE_LOGFILE=${{ github.workspace }}/ccache.log" >> $GITHUB_ENV # 设置ccache日志文件路径
          echo "/usr/lib/ccache" >> $GITHUB_PATH # 将ccache添加到PATH环境变量
          
      - name: Show ccache stats # 步骤名称：显示ccache统计信息
        run: | # 执行多行shell命令
          ccache -s || true # 显示ccache统计信息，如果失败则忽略错误

      # 3. 仓库拉取与初始化
      - name: Checkout # 步骤名称：检出代码
        uses: actions/checkout@v4 # 使用GitHub Actions官方检出Action

      - name: Initialize repo and sync # 步骤名称：初始化repo并同步代码
        run: | # 执行多行shell命令
          mkdir kernel_workspace && cd kernel_workspace # 创建内核工作目录并进入
          # 初始化repo，指定manifest仓库、分支和xml文件
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          # 同步代码，-c表示只同步当前分支，-j指定并行任务数，--no-tags表示不下载tag
          repo --trace sync -c -j$(nproc --all) --no-tags
          # 移除GKI保护的导出文件，如果不存在则忽略错误
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      # 4. SukiSU & SUSFS 设置与补丁应用
      - name: Set up SukiSU # 步骤名称：设置SukiSU
        run: | # 执行多行shell命令
          cd kernel_workspace/kernel_platform # 进入内核平台目录
          # 下载并执行SukiSU设置脚本
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          cd ./KernelSU # 进入KernelSU目录
          # 计算KSU版本号
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV # 将KSU版本号写入环境变量
          export KSU_VERSION=$KSU_VERSION # 导出KSU版本号
          # 修改KernelSU的Makefile，更新DKSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Set up SUSFS & apply patches # 步骤名称：设置SUSFS并应用补丁
        run: | # 执行多行shell命令
          set -e # 遇到错误立即退出
          cd kernel_workspace # 进入内核工作目录
          # 克隆susfs4ksu仓库
          git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}
          # 克隆SukiSU_patch仓库
          git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
          # 克隆boot仓库（需要TOKEN进行认证）
          git clone https://$TOKEN@github.com/3620603660/boot.git
          cd kernel_platform # 进入内核平台目录
          # 复制SUSFS相关补丁文件，如果不存在则忽略错误
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch ./common/ || true
          # 创建必要的目录
          mkdir -p ./common/fs ./common/include/linux ./common/lib ./common/crypto
          # 复制SUSFS相关文件
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/ || true
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/ || true
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux || true
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib || true
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto || true
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/ || true
          cp ../boot/1.patch ./common/
          cd ./common # 进入common目录
          PATCH_FILE=50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch # 定义补丁文件路径
          if [[ -f "$PATCH_FILE" ]]; then # 如果补丁文件存在
            # 修改补丁文件内容，适应不同版本
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' "$PATCH_FILE"
            sed -i '/#include <trace\/hooks\/fs.h>/d' "$PATCH_FILE"
            patch -p1 < "$PATCH_FILE" || true # 应用补丁，如果失败则忽略错误
          fi
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./ # 复制syscall_hooks补丁
          patch -p1 -F 3 < syscall_hooks.patch || true # 应用syscall_hooks补丁，如果失败则忽略错误
          patch -s -p1 -F 3 < 1.patch # 应用1.patch补丁
          echo "✅ SUSFS 和 syscall_hooks patch 应用完成" # 输出成功信息

      - name: Update compression algorithms # 步骤名称：更新压缩算法
        run: | # 执行多行shell命令
          cd kernel_workspace/kernel_platform/common # 进入common目录
          # 更新LZ4实现：下载最新的LZ4解压、定义、压缩和HC压缩文件
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4_decompress.c
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4defs.h
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4_compress.c
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4hc_compress.c
          # 更新Zstd实现：创建zstd目录并下载相关文件
          zstd_base="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/zstd"
          mkdir -p lib/zstd && cd lib/zstd
          curl -sSL $zstd_base/zstd_common_module.c -o common.c
          curl -sSL $zstd_base/compress/zstd_compress_module.c -o compress.c
          curl -sSL $zstd_base/decompress/zstd_decompress_module.c -o decompress.c
          curl -sSL $zstd_base/zstd_compat.h -o compat.h
          cd ../../.. # 返回到kernel_workspace目录
          echo "✅ LZ4/Zstd 算法更新完成" # 输出成功信息

      - name: Apply lz4kd Patches # 步骤名称：应用lz4kd补丁
        run: | # 执行多行shell命令
          set -e # 遇到错误立即退出
          cd kernel_workspace/kernel_platform/common # 进入common目录
          PATCH_FILE=../../SukiSU_patch/other/zram/zram_patch/${{ inputs.KERNEL_VERSION }}/lz4kd.patch # 定义补丁文件路径
          if [[ -f "$PATCH_FILE" ]]; then # 如果补丁文件存在
            cp "$PATCH_FILE" ./lz4kd.patch # 复制补丁文件
            patch -p1 -F 3 < lz4kd.patch || true # 应用补丁，如果失败则忽略错误
          else # 如果补丁文件不存在
            echo "❗ lz4kd patch not found for kernel version ${{ inputs.KERNEL_VERSION }}" # 输出警告信息
          fi

      # 5. 内核配置修改
      - name: Add SUSFS Configuration Settings # 步骤名称：添加SUSFS配置设置
        run: | # 执行多行shell命令
          cd kernel_workspace/kernel_platform # 进入内核平台目录
          # 启用KernelSU
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          # 添加VFS配置设置
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          # 添加SUSFS配置设置
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          # 确保所有必需的压缩算法都已启用
          echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 LZ4HC 加密
          echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 LZ4K 加密
          echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 LZ4KD 加密
          echo "CONFIG_F2FS_FS_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统 LZ4HC 压缩
          echo "CONFIG_CRYPTO_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 ZSTD 加密
          echo "CONFIG_CRYPTO_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 LZ4 加密
          # 启用 ZRAM 及其压缩选项
          echo "CONFIG_ZRAM=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 ZRAM
          echo "CONFIG_ZRAM_LZ4_COMPRESS=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 ZRAM LZ4 压缩
          echo "CONFIG_ZRAM_LZ4KD_COMPRESS=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 ZRAM LZ4KD 压缩
          echo "CONFIG_ZRAM_ZSTD_COMPRESS=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 ZRAM ZSTD 压缩
          echo "CONFIG_ZRAM_MULTI_COMP=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 ZRAM 多压缩器支持
          # 添加 BBR 和通用 Linux 优化设置
          echo "CONFIG_HZ_250=y" >> ./common/arch/arm64/configs/gki_defconfig # 设置时钟频率为 250Hz
          echo "CONFIG_NO_HZ_IDLE=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用空闲时无时钟节拍
          echo "CONFIG_NET_SCHED=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用网络调度
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用高级 TCP 拥塞控制
          echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 BBR TCP 拥塞控制算法
          echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 FQ 网络调度器
          echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig # 禁用 BIC TCP 拥塞控制算法
          echo "CONFIG_TCP_CONG_CUBIC=n" >> ./common/arch/arm64/configs/gki_defconfig # 禁用 CUBIC TCP 拥塞控制算法
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig # 禁用 WESTWOOD TCP 拥塞控制算法
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig # 禁用 HTCP TCP 拥塞控制算法
          echo "CONFIG_TCP_CONG_BBR3=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 BBR3 TCP拥塞控制算法
          echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> ./common/arch/arm64/configs/gki_defconfig # 设置默认TCP拥塞控制算法为BBR3
          echo "CONFIG_INET=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用IPv4协议栈
          echo "CONFIG_NET_RX_BUSY_POLL=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用网络接收忙轮询
          echo "CONFIG_NET_RX_BUSY_READ=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用网络接收忙读
          echo "CONFIG_SCHED_EEVDF=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 EEVDF 调度器
          echo "CONFIG_F2FS_FS=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统
          echo "CONFIG_F2FS_STAT_FS=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 统计信息
          echo "CONFIG_F2FS_FS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 扩展属性
          echo "CONFIG_F2FS_FS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS POSIX ACL
          echo "CONFIG_F2FS_FS_SECURITY=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 安全性
          echo "CONFIG_F2FS_CHECK_FS=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统检查
          echo "CONFIG_F2FS_IOSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS IO 统计
          echo "CONFIG_F2FS_FAULT_INJECTION=n" >> ./common/arch/arm64/configs/gki_defconfig # 禁用 F2FS 故障注入
          echo "CONFIG_F2FS_HW_PCI_ROM=n" >> ./common/arch/arm64/configs/gki_defconfig # 禁用 F2FS 硬件 PCI ROM
          echo "CONFIG_F2FS_FS_ENCRYPTION=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统加密
          echo "CONFIG_F2FS_FS_COMPRESSION=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统压缩
          echo "CONFIG_F2FS_FS_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统 LZ4 压缩
          echo "CONFIG_F2FS_FS_LZO=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统 LZO 压缩
          echo "CONFIG_F2FS_FS_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统 ZSTD 压缩
          sed -i 's/check_defconfig//' ./common/build.config.gki # 移除 build.config.gki 中的 check_defconfig
          # I/O调度器优化
          echo "CONFIG_BLK_MQ_IOSCHED_DEADLINE=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用mq-deadline I/O调度器
          echo "CONFIG_BLK_MQ_IOSCHED_KYBER=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用kyber I/O调度器
          echo "CONFIG_BLK_MQ_IOSCHED_BFQ=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 BFQ I/O调度器
          echo "CONFIG_BLK_MQ_IOSCHED_NONE=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 NONE I/O调度器
          echo "CONFIG_DEFAULT_IOSCHED=\"BFQ\"" >> ./common/arch/arm64/configs/gki_defconfig # 设置BFQ为默认I/O调度器
          echo "CONFIG_IO_URING_ASYNC_WORK=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 io_uring 异步工作队列
          echo "CONFIG_PAGE_POOL=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用页面池优化
          echo "CONFIG_TRANSPARENT_HUGEPAGE_MADVISE=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用透明大页（MADVISE模式）
          # 移除 check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel" # 提交内核构建相关的修改
          
      - name: Enable KPM # 步骤名称：启用KPM
        if: ${{ fromJSON(github.event.inputs.ENABLE_KPM) }} # 条件：如果ENABLE_KPM输入为true
        run: | # 执行多行shell命令
          cd kernel_workspace/kernel_platform # 进入内核平台目录
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用KPM配置
          sed -i 's/check_defconfig//' ./common/build.config.gki # 移除 build.config.gki 中的 check_defconfig
          cd common
          git add -A && git commit -a -m "BUILD Kernel" # 提交内核构建相关的修改

      - name: Enable LTO # 步骤名称：启用LTO
        if: ${{ fromJSON(github.event.inputs.ENABLE_LTO) }} # 条件：如果ENABLE_LTO输入为true
        run: | # 执行多行shell命令
          cd kernel_workspace/kernel_platform # 进入内核平台目录
          echo "CONFIG_LTO_CLANG=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用LTO Clang配置
          echo "CONFIG_LTO_CLANG_THIN=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用LTO Clang Thin配置
          echo "CONFIG_LTO_POLLY=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用LTO Polly配置
          sed -i 's/check_defconfig//' ./common/build.config.gki # 移除 build.config.gki 中的 check_defconfig
          cd common
          git add -A && git commit -a -m "BUILD Kernel with LTO enabled" # 提交内核构建相关的修改

      - name: Add make name
        run: |
         cd kernel_workspace/kernel_platform
         sed -i '186s|echo ".*"|echo "${KERNELVERSION}${scm_version}${config_localversion}"|' common/scripts/setlocalversion
         sed -i "s/\${scm_version}/${{ github.event.inputs.KERNEL_NAME }}/g" ./common/scripts/setlocalversion

      - name: 设置 CONFIG_LOCALVERSION
        run: |
         cd kernel_workspace/kernel_platform
         echo 'CONFIG_LOCALVERSION="${{ github.event.inputs.local_version }}"' >> ./common/arch/arm64/configs/gki_defconfig

    
      - name: 拉取并集成 sched_ext 调度器
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/3620603660/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git

      - name: 拉取afdo
        run: |
          cd kernel_workspace/kernel_platform/
          git clone https://github.com/3620603660/afdo.git
            
      - name: Set build timestamp
        run: |         
         export SOURCE_DATE_EPOCH=$(date -d "Tue Dec 17 23:36:49 UTC 2024" +%s)
         echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV

      # 6. 内核编译与打包
      - name: Build Kernel
        run: |
         # 加入 clang 到 PATH
         export PATH="${{ github.workspace }}/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
         # 加入 ccache 到 PATH
         export PATH="/usr/lib/ccache:$PATH" 

         # 设置固定内核构建时间
         export KERNEL_TIME="${{ github.event.inputs.kernel_time }}"
         export KBUILD_BUILD_TIMESTAMP="$KERNEL_TIME"
         export SOURCE_DATE_EPOCH=$(date -d "$KERNEL_TIME" +%s)
         export AFDO_PROFILE="${{ github.workspace }}/kernel_workspace/kernel_platform/afdo/kernel.afdo"
         if [ ! -f "$AFDO_PROFILE" ]; then
           echo "Error: AFDO profile not found at $AFDO_PROFILE"
         exit 1
         fi

         # 打印验证
         echo "KERNEL_TIME = $KERNEL_TIME"
         echo "SOURCE_DATE_EPOCH = $SOURCE_DATE_EPOCH"
         echo "Using KCFLAGS: -Wno-error -fauto-profile=$AFDO_PROFILE"

         # 设置一些通用参数（便于后续维护）
         export KCFLAGS="-Wno-error -fauto-profile=$AFDO_PROFILE -O2"
         export MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang \
         RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
         PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
         LD=ld.lld HOSTLD=ld.lld O=out SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH}"

         # 进入源码目录
         cd kernel_workspace/kernel_platform/common

         # 执行 defconfig
         make -j$(nproc) $MAKE_ARGS gki_defconfig

         # 编译全部目标
         make -j$(nproc) $MAKE_ARGS all

         # 创建输出目录并复制 Image
         mkdir -p ../dist
         cp out/arch/arm64/boot/Image ../dist/

      - name: 验证内核构建时间
        run: |
         strings kernel_workspace/kernel_platform/common/out/vmlinux | grep "UTC"

      - name: Make AnyKernel3 patch (optional)
        if: ${{ fromJSON(github.event.inputs.ENABLE_KPM) }}
        run: |
          cd kernel_workspace/kernel_platform/dist
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image

      - name: Prepare AnyKernel3 package
        run: |
          cd kernel_workspace/kernel_platform/dist
          git clone https://github.com/3620603660/AnyKernel3.git AnyKernel3 --depth=1
          rm -rf AnyKernel3/.git
          rm -f AnyKernel3/push.sh
          cp Image AnyKernel3/

      - name: Upload AnyKernel3 artifact
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_oneplus_ace5pro_${{ env.KSUVER }}_sukisu
          path: kernel_workspace/kernel_platform/dist/AnyKernel3/*


