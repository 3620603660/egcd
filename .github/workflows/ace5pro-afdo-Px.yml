name: ace5pro-afdo-build

# 定义工作流的触发条件
on:
  # 当手动触发工作流时
  workflow_dispatch:
    # 定义工作流的输入参数
    inputs:
      CPU:
        description: "分支名称，例如 sm8750"
        required: true
        default: "sm8750"
      FEIL:
        description: "配置文件名称，例如 oneplus_ace5_pro"
        required: true
        default: "oneplus_ace5_pro"
      ANDROID_VERSION:
        description: "内核对应的 Android 版本，例如 android15"
        required: true
        default: "android15"
      KERNEL_VERSION:
        description: "内核版本，例如 6.6"
        required: true
        default: "6.6"
      KERNEL_NAME:
        description: "修改后的内核名称后缀"
        required: true
        default: "-android15-8-g013ec21bba94-abogki383916444"
      local_version:
        description: "输入内核后缀名（如-v8）"
        required: false
        default: "-4k"
        type: string
      kernel_time:
        description: "内核构建时间（UTC 时间字符串，例如 \"Tue Dec 17 23:36:49 UTC 2024\"）"
        required: false
        default: "Tue Dec 17 23:36:49 UTC 2024"
        type: string
      ENABLE_LTO:
        description: "是否启用 LTO (Link Time Optimization) 链接时优化"
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      TOKEN: ${{ secrets.TOKEN }}
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git
        run: |
         git config --global user.name "jianqing"
         git config --global user.email "2106456897@qq.com"

      - name: Install dependencies
        run: |
         sudo apt update && sudo apt upgrade -y
         sudo apt install -y python3 git curl

      - name: Install repo tool
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ inputs.CPU }} -m ${{ inputs.FEIL }}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
      
      - name: SukiSU-Ultra & SukiSU version
        # 移除 kernelsu_variant 和 kernelsu_version 的输入，因此这里需要调整逻辑
        # 假设默认使用 SukiSU-Ultra 且版本为 main，或者根据需要调整
        run: |
          echo "BRANCH=-s susfs-dev" >> $GITHUB_ENV

      - name: Add SukiSU-Ultra
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash ${{ env.BRANCH }}
          cd ./KernelSU
          KSU_VERSION=$(expr $(git rev-list --count main) + 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Set up SUSFS & apply patches
        run: |
         set -e

         cd kernel_workspace
         git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}
         git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
         git clone https://$TOKEN@github.com/egcd521/111.git
         cd kernel_platform
         cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch ./common/ || true
         mkdir -p ./common/fs ./common/include/linux ./common/lib ./common/crypto
         cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/ || true
         cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/ || true
         cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux || true
         cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib || true
         cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto || true
         cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/ || true
         cp ../111/boot.patch ./common/
         cd ./common
         PATCH_FILE=50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch
         if [[ -f "$PATCH_FILE" ]]; then
         sed -i 's/-32,12 +32,38/-32,11 +32,37/g' "$PATCH_FILE"
         sed -i '/#include <trace\/hooks\/fs.h>/d' "$PATCH_FILE"
         patch -p1 < "$PATCH_FILE" || true
         fi
         cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
         patch -p1 -F 3 < syscall_hooks.patch || true
         patch -s -p1 -F 3 < boot.patch
         echo "✅ SUSFS 和 syscall_hooks patch 应用完成"

      - name: Apply lz4kd Patches
        run: |
         set -e
         cd kernel_workspace/kernel_platform/common
         PATCH_FILE=../../SukiSU_patch/other/zram/zram_patch/${{ inputs.KERNEL_VERSION }}/lz4kd.patch
         if [[ -f "$PATCH_FILE" ]]; then
         cp "$PATCH_FILE" ./lz4kd.patch
         patch -p1 -F 3 < lz4kd.patch || true
         else
         echo "❗ lz4kd patch not found for kernel version ${{ inputs.KERNEL_VERSION }}"
         fi

      - name: Download kernel.afdo
        run: |
          cd kernel_workspace/kernel_platform/common
          curl -LO https://raw.githubusercontent.com/3620603660/egcd/refs/heads/main/kernel.afdo
          echo "✅ kernel.afdo downloaded"

      - name: Prepare Kernel Configuration and Optimizations
        run: |
          cd kernel_workspace/kernel_platform/common/arch/arm64/configs/

          # Clean up potentially conflicting existing configuration entries
          sed -i '/CONFIG_CRYPTO_ZSTD/d' gki_defconfig
          sed -i '/CONFIG_CRYPTO_LZ4/d' gki_defconfig
          sed -i '/CONFIG_ZRAM/d' gki_defconfig
          sed -i '/CONFIG_NET_SCHED/d' gki_defconfig
          sed -i '/CONFIG_NET_SCH_FQ/d' gki_defconfig
          sed -i '/CONFIG_F2FS_FS/d' gki_defconfig
          sed -i '/CONFIG_F2FS_FS_SECURITY/d' gki_defconfig
          sed -i '/CONFIG_F2FS_FS_COMPRESSION/d' gki_defconfig
          sed -i '/CONFIG_LOCALVERSION/d' gki_defconfig
          sed -i '/CONFIG_LOCALVERSION_AUTO/d' gki_defconfig

          # Add KSU and SUSFS configuration settings
          echo "CONFIG_KSU=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> gki_defconfig

          # Add compression algorithms
          echo "CONFIG_CRYPTO_LZ4HC=y" >> gki_defconfig
          echo "CONFIG_CRYPTO_LZ4K=y" >> gki_defconfig
          echo "CONFIG_CRYPTO_LZ4KD=y" >> gki_defconfig
          echo "CONFIG_CRYPTO_842=y" >> gki_defconfig
          echo "CONFIG_CRYPTO_ZSTD=y" >> gki_defconfig
          echo "CONFIG_CRYPTO_LZ4=y" >> gki_defconfig

          # Add ZRAM and BBR
          echo "CONFIG_ZRAM=y" >> gki_defconfig
          echo "CONFIG_ZRAM_LZ4_COMPRESS=y" >> gki_defconfig
          echo "CONFIG_ZRAM_LZO_COMPRESS=y" >> gki_defconfig
          echo "CONFIG_ZRAM_LZ4HC_COMPRESS=y" >> gki_defconfig
          echo "CONFIG_ZRAM_ZSTD_COMPRESS=y" >> gki_defconfig
          echo "CONFIG_NET_SCHED=y" >> gki_defconfig
          echo "CONFIG_NET_SCH_FQ=y" >> gki_defconfig
          echo "CONFIG_NET_SCH_FQ_CODEL=y" >> gki_defconfig
          echo "CONFIG_NET_SCH_CAKE=y" >> gki_defconfig
          echo "CONFIG_TCP_CONG_BBR=y" >> gki_defconfig

          # Add F2FS
          echo "CONFIG_F2FS_FS=y" >> gki_defconfig
          echo "CONFIG_F2FS_FS_SECURITY=y" >> gki_defconfig
          echo "CONFIG_F2FS_FS_COMPRESSION=y" >> gki_defconfig

          # Add AFDO optimization settings
          echo "CONFIG_FPROFILE_SAMPLE_PATH=\"kernel.afdo\"" >> gki_defconfig
          echo "CONFIG_FPROFILE_SAMPLE_USE=y" >> gki_defconfig

          # Add LTO optimization settings conditionally
          if [ "${{ inputs.ENABLE_LTO }}" = "true" ]; then
            echo "CONFIG_LTO_CLANG=y" >> gki_defconfig
            echo "CONFIG_LTO=y" >> gki_defconfig
          fi

          # Set LOCALVERSION
          if [ "${{ inputs.local_version }}" != "-4k" ]; then
            echo "CONFIG_LOCALVERSION=\"${{ inputs.local_version }}\"" >> gki_defconfig
          else
            echo "CONFIG_LOCALVERSION=\"-4k\"" >> gki_defconfig
          fi
          echo "CONFIG_LOCALVERSION_AUTO=n" >> gki_defconfig

          echo "✅ Kernel Configuration and Optimizations Applied"

      - name: Remove check_defconfig and Commit Changes
        run: |
          cd kernel_workspace/kernel_platform/common/
          sed -i 's/check_defconfig//' build.config.gki
          git add -A && git commit -a -m "BUILD Kernel"
          echo "✅ build.config.gki modified and changes committed"

      - name: Add make name
        run: |
         cd kernel_workspace/kernel_platform || exit 1

          # 转义特殊字符（防御性处理）
          ESCAPED_NAME=$(echo "${{ inputs.KERNEL_NAME }}" | sed 's/[\/&]/\\&/g')

          # 使用备选分隔符执行替换
          sed -i "s|res=\"\$res\$(cat \"\$file\")\"|res=\"${ESCAPED_NAME}\"|g" ./common/scripts/setlocalversion

          # 验证修改结果
          echo "==== 最终配置 ===="
          grep 'res=' ./common/scripts/setlocalversion

      - name: Add sched_ext
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/egcd123/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git
         cd common/kernel/sched
         sed -i.bak '/# include "ext.c"/a\# include "hmbird_sched_proc_main.c"\n#endif\n\n#ifdef CONFIG_SLIM_SCHED\n# include "slim_sysctl.c"' build_policy.c

      - name: Set build timestamp
        run: |         
         export KERNEL_TIME="${{ inputs.kernel_time }}"
         export KBUILD_BUILD_TIMESTAMP="$KERNEL_TIME"
         export SOURCE_DATE_EPOCH=$(date -d "$KERNEL_TIME" +%s)
         echo "KERNEL_TIME = $KERNEL_TIME"
         echo "SOURCE_DATE_EPOCH = $SOURCE_DATE_EPOCH"
         echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV
         
      - name: Build kernel
        run: |
         cd kernel_workspace/kernel_platform
         tools/bazel run --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist
         
      - name: Prepare AnyKernel3 Packages
        run: |
         cd kernel_workspace/kernel_platform/dist
         git clone https://github.com/egcd123/AnyKernel3.git AnyKernel3 --depth=1
         rm -rf AnyKernel3/.git
         rm -f AnyKernel3/push.sh
         cp Image AnyKernel3/
                         
      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
         name: AnyKernel3_oneplus_ace5pro
         path: kernel_workspace/kernel_platform/dist/AnyKernel3/*


