name: Compile perf

on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8750'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus_ace5_pro'
      CPUD:
        description: "处理器代号"
        required: true
        default: 'sun'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.6'

jobs:
  compile-perf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # 建议使用最新版本的 actions/checkout

      - name: Install tools
        run: |
          sudo apt update
          sudo apt install -y curl git build-essential libncurses-dev bison flex libssl-dev libelf-dev

      - name: Download and install repo tool
        run: |
          mkdir -p ~/.bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+x ~/.bin/repo
          echo "~/.bin" >> $GITHUB_PATH # 将 ~/.bin 添加到 PATH 环境变量

      - name: Initialize and sync repo
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          # 确保 manifest 仓库存在且分支和文件路径正确
          repo init -u https://github.com/3620603660/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo sync -c -j$(nproc --all  ) --no-tags

      - name: Remove protected exports
        run: |
          # 检查文件是否存在再删除，避免报错
          rm -rf kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
          rm -rf kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"

      - name: Set up Android build environment and compile kernel
        run: |
          cd kernel_workspace
          # 设置环境变量，例如 ARCH 和 CROSS_COMPILE
          export ARCH=arm64 # 假设是 arm64 架构，根据实际情况调整
          export CROSS_COMPILE=$(pwd)/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android- # 示例路径，请根据实际情况调整
          export KERNEL_OUT=$(pwd)/out/target/product/generic_arm/obj/KERNEL_OBJ # 定义内核编译输出目录

          # 清理旧的编译产物
          make O=${KERNEL_OUT} clean
          make O=${KERNEL_OUT} mrproper

          # 配置内核
          # 这里需要根据你的内核版本和配置文件来选择合适的 defconfig
          # 例如：make O=${KERNEL_OUT} ${{ github.event.inputs.CPUD }}_defconfig
          # 或者根据你的 manifest 文件中的说明来配置
          echo "请根据您的内核源码和配置文件，手动添加内核配置命令，例如：make O=${KERNEL_OUT} defconfig"
          # make O=${KERNEL_OUT} your_defconfig_here # 替换为实际的 defconfig

          # 编译内核
          # make O=${KERNEL_OUT} -j$(nproc) # 编译整个内核，如果只需要 perf，可能不需要编译整个内核

      - name: Compile perf binary
        run: |
          cd kernel_workspace
          # 确保 perf 编译所需的内核源码和编译环境已准备好
          # perf 工具通常需要与编译内核时相同的工具链和头文件
          # 假设 perf 源码在 tools/perf 目录下
          # 编译 perf
          make -C tools/perf O=${KERNEL_OUT} ARCH=arm64 CROSS_COMPILE=$(pwd)/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android- # 示例路径，请根据实际情况调整
          # 编译 perf 可能会有特定的编译指令，请根据 perf 源码的 README 或文档进行调整

      - name: Install perf binary
        run: |
          # 确保 perf 编译成功后，将其复制到指定位置
          # 假设编译好的 perf 可执行文件在 kernel_workspace/tools/perf/perf
          # 如果编译输出目录不同，请根据实际情况调整路径
          sudo cp kernel_workspace/tools/perf/perf /usr/bin/perf
          sudo chmod +x /usr/bin/perf
          echo "perf binary installed to /usr/bin/perf"

      - name: Verify perf installation
        run: |
          perf --version
          perf list