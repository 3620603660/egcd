name: Compile perf

on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8750'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus_ace5_pro'
      CPUD:
        description: "处理器代号"
        required: true
        default: 'sun'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.6'

jobs:
  compile-perf:
    runs-on: ubuntu-latest

    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      TOKEN: ${{ secrets.TOKEN }}
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: Configure Git
        run: |
         git config --global user.name "build"
         git config --global user.email "3620603668@qq.com"
      # 1. 拉取仓库  
      - name: Checkout  
        uses: actions/checkout@v4  

      # 2. 安装构建依赖（包括 ccache）  
      - name: Install Dependencies  
        run: |  
         sudo apt-get update  
         sudo apt-get install -y python3 git curl ccache libelf-dev
         
      # 3. 恢复 ccache 缓存  
      - name: Restore ccache
        uses: actions/cache@v3
        with:
         path: /home/runner/.ccache
         key: ${{ runner.os }}-${{ github.repository }}-v上游
         restore-keys: |
          ${{ runner.os }}-${{ github.repository }}-
          ${{ runner.os }}-
          ccache-
      # 4. 设置 ccache 环境变量  
      - name: Setup ccache environment  
        run: |  
         echo "CCACHE_DIR=/home/runner/.ccache" >> $GITHUB_ENV  
         echo "CCACHE_MAXSIZE=8G" >> $GITHUB_ENV  
         echo "CCACHE_COMPILERCHECK=%compiler% -dumpmachine; %compiler% -dumpversion" >> $GITHUB_ENV  
         echo "CCACHE_NOHASHDIR=true" >> $GITHUB_ENV  
         echo "CCACHE_HARDLINK=true" >> $GITHUB_ENV  
         echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV  
         echo "CCACHE_LOGFILE=${{ github.workspace }}/ccache.log" >> $GITHUB_ENV  
         echo "/usr/lib/ccache" >> $GITHUB_PATH  
         
      - name: Show ccache stats
        run: |
         ccache -s || true


      - name: Install tools and clean apt cache
        run: |
          sudo apt update
          sudo apt install -y curl git build-essential libncurses-dev bison flex libssl-dev libelf-dev
          sudo apt clean # 清理 apt 缓存
          sudo rm -rf /var/lib/apt/lists/* # 移除 apt 列表，释放更多空间
          df -h # 打印磁盘使用情况，方便调试

      - name: Download and install repo tool
        run: |
          mkdir -p ~/.bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+x ~/.bin/repo
          echo "~/.bin" >> $GITHUB_PATH

      - name: Initialize and sync repo
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/3620603660/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo sync -c -j$(nproc --all  ) --no-tags
          df -h # 再次打印磁盘使用情况，查看 repo sync 后的空间占用

      - name: Debug prebuilts path
        run: |
          echo "Listing contents of kernel_workspace:"
          ls -la "${GITHUB_WORKSPACE}/kernel_workspace/"
          echo "Listing contents of kernel_workspace/prebuilts/ (if exists):"
          ls -la "${GITHUB_WORKSPACE}/kernel_workspace/prebuilts/" || echo "kernel_workspace/prebuilts/ not found."
          echo "Listing contents of kernel_workspace/prebuilts/clang/host/linux-x86/ (if exists):"
          ls -la "${GITHUB_WORKSPACE}/kernel_workspace/prebuilts/clang/host/linux-x86/" || echo "kernel_workspace/prebuilts/clang/host/linux-x86/ not found."
          echo "Listing contents of kernel_workspace/prebuilts/gcc/linux-x86/aarch64/ (if exists):"
          ls -la "${GITHUB_WORKSPACE}/kernel_workspace/prebuilts/gcc/linux-x86/aarch64/" || echo "kernel_workspace/prebuilts/gcc/linux-x86/aarch64/ not found."

      - name: Remove protected exports
        run: |
          rm -rf kernel_workspace/kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
          rm -rf kernel_workspace/kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"

      - name: Set up build environment and compile kernel
        run: |
          KERNEL_SRC_ROOT="${GITHUB_WORKSPACE}/kernel_workspace/kernel_platform/common"
          cd ${KERNEL_SRC_ROOT}

          echo "Current directory for kernel compilation:"
          pwd
          echo "Listing contents of current directory:"
          ls -la

          # --- 工具链设置 ---
          TOOLCHAIN_BASE_PATH=""
          if [ -d "${GITHUB_WORKSPACE}/kernel_workspace/prebuilts/clang/host/linux-x86/clang-r450784d/bin" ] && \
             [ -d "${GITHUB_WORKSPACE}/kernel_workspace/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin" ]; then
            export PATH="${GITHUB_WORKSPACE}/kernel_workspace/prebuilts/clang/host/linux-x86/clang-r450784d/bin:${GITHUB_WORKSPACE}/kernel_workspace/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin:${PATH}"
            export CROSS_COMPILE_ARM64="${GITHUB_WORKSPACE}/kernel_workspace/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-"
            echo "Using toolchain from repo prebuilts."
            else
            # 查找 NDK 的常见路径
            # 尝试使用 ANDROID_NDK_HOME 环境变量
            # 或者在 /usr/local/lib/android/sdk/ndk/ 或 /opt/android/sdk/ndk/ 下查找
            NDK_ROOT=""
            if [ -n "${ANDROID_NDK_HOME}" ]; then
            NDK_ROOT="${ANDROID_NDK_HOME}"
            elif [ -d "/usr/local/lib/android/sdk/ndk/" ]; then
            NDK_ROOT=$(find /usr/local/lib/android/sdk/ndk/ -maxdepth 1 -type d -name "*-*" | head -n 1)
            elif [ -d "/opt/android/sdk/ndk/" ]; then
            NDK_ROOT=$(find /opt/android/sdk/ndk/ -maxdepth 1 -type d -name "*-*" | head -n 1)
            fi

            if [ -n "${NDK_ROOT}" ]; then
            export PATH="${NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/bin:${NDK_ROOT}/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin:${PATH}"
            export CROSS_COMPILE_ARM64="${NDK_ROOT}/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin/aarch64-linux-android-"
            echo "Using NDK toolchain from: ${NDK_ROOT}"
            else
            echo "Error: NDK toolchain not found in common locations."
            exit 1
           fi

          export ARCH=arm64
          export CROSS_COMPILE="${CROSS_COMPILE_ARM64}"
          export CLANG_TRIPLE="aarch64-linux-gnu-"

          # --- GKI 内核构建 ---
          BUILD_CONFIG_NAME="gki.aarch64"

          if [ ! -f "build.config.${BUILD_CONFIG_NAME}" ]; then
            echo "Error: build.config.${BUILD_CONFIG_NAME} not found. Please check your FEIL and CPU inputs or the build.config files."
            ls -l build.config.*
            exit 1
          fi

          export OUT_DIR="${GITHUB_WORKSPACE}/kernel_workspace/out"
          export KERNEL_OUT="${OUT_DIR}/common/obj/KERNEL_OBJ"

          echo "Compiling kernel with BUILD_CONFIG=${BUILD_CONFIG_NAME} and OUT_DIR=${OUT_DIR}"
          build/build.sh ${BUILD_CONFIG_NAME} -j$(nproc)

          # --- 编译 perf binary ---
          echo "Compiling perf binary..."
          make -C tools/perf O=${KERNEL_OUT} ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE}

      - name: Prepare perf for archiving
        run: |
          mkdir -p perf_package
          KERNEL_OUT_PATH="${GITHUB_WORKSPACE}/kernel_workspace/out/common/obj/KERNEL_OBJ"

          cp "${KERNEL_OUT_PATH}/tools/perf/perf" perf_package/perf || \
          cp "${KERNEL_OUT_PATH}/usr/bin/perf" perf_package/perf || \
          (echo "Error: perf binary not found in expected locations." && exit 1)
          echo "perf binary prepared for archiving."

      - name: Create perf archive
        run: |
          tar -czvf perf_binary_${{ github.event.inputs.CPUD }}_${{ github.event.inputs.ANDROID_VERSION }}_${{ github.event.inputs.KERNEL_VERSION }}.tar.gz perf_package/
          echo "perf archive created."

      - name: Upload perf archive
        uses: actions/upload-artifact@v4
        with:
          name: perf-binary-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          path: perf_binary_*.tar.gz
          retention-days: 7

      - name: Verify perf installation (Optional)
        run: |
          tar -xzvf perf_binary_*.tar.gz
          ./perf_package/perf --version
          ./perf_package/perf list
