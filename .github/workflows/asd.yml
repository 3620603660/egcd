name: Compile perf

on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8750'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus_ace5_pro'
      CPUD:
        description: "处理器代号"
        required: true
        default: 'sun'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.6'

jobs:
  compile-perf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt update
          sudo apt install -y curl git build-essential libncurses-dev bison flex libssl-dev libelf-dev

      - name: Download and install repo tool
        run: |
          mkdir -p ~/.bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+x ~/.bin/repo
          echo "~/.bin" >> $GITHUB_PATH

      - name: Initialize and sync repo
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/3620603660/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo sync -c -j$(nproc --all  ) --no-tags

      - name: Remove protected exports
        run: |
          rm -rf kernel_workspace/kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
          rm -rf kernel_workspace/kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"

      - name: Set up Android build environment and compile kernel
        run: |
          cd kernel_workspace/kernel_platform

          echo "Current directory for kernel compilation:"
          pwd
          echo "Listing contents of current directory (should contain Makefile):"
          ls -la

          TOOLCHAIN_PATH=$(pwd)/../prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-
          if [ ! -d "$(dirname ${TOOLCHAIN_PATH})" ]; then
            echo "Error: Cross-compilation toolchain directory not found at $(dirname ${TOOLCHAIN_PATH})"
            echo "Please ensure your manifest file includes the prebuilts repository and its path is correct."
            exit 1
          fi

          export ARCH=arm64
          export CROSS_COMPILE=${TOOLCHAIN_PATH}
          export KERNEL_OUT=$(pwd)/../out/target/product/generic_arm/obj/KERNEL_OBJ

          make O=${KERNEL_OUT} clean
          make O=${KERNEL_OUT} mrproper

          echo "请根据您的内核源码和配置文件，手动添加内核配置命令，例如：make O=${KERNEL_OUT} defconfig"
          # make O=${KERNEL_OUT} your_defconfig_here # 替换为实际的 defconfig

      - name: Compile perf binary
        run: |
          cd kernel_workspace/kernel_platform

          TOOLCHAIN_PATH=$(pwd)/../prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-
          if [ ! -d "$(dirname ${TOOLCHAIN_PATH})" ]; then
            echo "Error: Cross-compilation toolchain directory not found at $(dirname ${TOOLCHAIN_PATH})"
            echo "Please ensure your manifest file includes the prebuilts repository and its path is correct."
            exit 1
          fi

          export ARCH=arm64
          export CROSS_COMPILE=${TOOLCHAIN_PATH}
          export KERNEL_OUT=$(pwd)/../out/target/product/generic_arm/obj/KERNEL_OBJ

          make -C tools/perf O=${KERNEL_OUT} ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE}

      - name: Prepare perf for archiving # 新增步骤：准备 perf 文件
        run: |
          # 创建一个临时目录来存放 perf 文件
          mkdir -p perf_package
          # 假设编译好的 perf 可执行文件在 kernel_workspace/kernel_platform/tools/perf/perf
          # 将 perf 复制到临时目录
          cp kernel_workspace/kernel_platform/tools/perf/perf perf_package/perf
          echo "perf binary prepared for archiving."

      - name: Create perf archive # 新增步骤：创建 perf 压缩包
        run: |
          # 使用 tar 命令创建 .tar.gz 压缩包
          # 压缩包名称可以包含版本信息或日期
          tar -czvf perf_binary_${{ github.event.inputs.CPUD }}_${{ github.event.inputs.ANDROID_VERSION }}_${{ github.event.inputs.KERNEL_VERSION }}.tar.gz perf_package/
          echo "perf archive created."

      - name: Upload perf archive # 新增步骤：上传 perf 压缩包
        uses: actions/upload-artifact@v4 # 建议使用最新版本的 upload-artifact
        with:
          name: perf-binary-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          path: perf_binary_*.tar.gz
          retention-days: 7 # 设置产物保留天数，默认为 90 天，可以根据需要调整

      - name: Verify perf installation (Optional) # 验证步骤，如果不需要可以删除
        run: |
          # 为了验证，可以解压并运行 perf
          tar -xzvf perf_binary_*.tar.gz
          ./perf_package/perf --version
          ./perf_package/perf list