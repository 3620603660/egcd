name: Compile perf

on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8750'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus_ace5_pro'
      CPUD:
        description: "处理器代号"
        required: true
        default: 'sun'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.6'

jobs:
  compile-perf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt update
          sudo apt install -y curl git build-essential libncurses-dev bison flex libssl-dev libelf-dev

      - name: Download and install repo tool
        run: |
          mkdir -p ~/.bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+x ~/.bin/repo
          echo "~/.bin" >> $GITHUB_PATH

      - name: Initialize and sync repo
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/3620603660/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo sync -c -j$(nproc --all  ) --no-tags

      - name: Remove protected exports
        run: |
          rm -rf kernel_workspace/kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
          rm -rf kernel_workspace/kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"

      - name: Set up Android build environment and compile kernel
        run: |
          KERNEL_SRC_ROOT="kernel_workspace/kernel_platform/common"

          cd ${KERNEL_SRC_ROOT}

          echo "Current directory for kernel compilation:"
          pwd
          echo "Listing contents of current directory (should contain Makefile):"
          ls -la

          TOOLCHAIN_BASE_PATH=""
          if [ -d "../../prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin" ]; then
            TOOLCHAIN_BASE_PATH="$(pwd)/../../prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin"
            echo "Using toolchain from repo prebuilts: ${TOOLCHAIN_BASE_PATH}"
          else
            NDK_TOOLCHAIN_PATH=$(find /usr/local/lib/android/sdk/ndk/ -name "aarch64-linux-android-gcc" | head -n 1)
            if [ -n "${NDK_TOOLCHAIN_PATH}" ]; then
              TOOLCHAIN_BASE_PATH=$(dirname ${NDK_TOOLCHAIN_PATH})
              echo "Using NDK toolchain: ${TOOLCHAIN_BASE_PATH}"
            else
              echo "Error: Cross-compilation toolchain not found. Please ensure it's synced or installed."
              exit 1
            fi
          fi

          export ARCH=arm64
          export CROSS_COMPILE="${TOOLCHAIN_BASE_PATH}/aarch64-linux-android-"
          export KERNEL_OUT=$(pwd)/../../out/target/product/generic_arm/obj/KERNEL_OBJ

          make O=${KERNEL_OUT} clean
          make O=${KERNEL_OUT} mrproper

          # 执行 defconfig
          # gki_defconfig 通常不需要 -j 参数，因为它是配置步骤，不是编译步骤
          make O=${KERNEL_OUT} gki_defconfig # <--- 修正 defconfig 命令

          # 编译内核 (如果需要编译整个内核，否则可以跳过)
          make O=${KERNEL_OUT} -j$(nproc)

      - name: Compile perf binary
        run: |
          KERNEL_SRC_ROOT="kernel_workspace/kernel_platform/common"
          cd ${KERNEL_SRC_ROOT}

          TOOLCHAIN_BASE_PATH=""
          if [ -d "../../prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin" ]; then
            TOOLCHAIN_BASE_PATH="$(pwd)/../../prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin"
          else
            NDK_TOOLCHAIN_PATH=$(find /usr/local/lib/android/sdk/ndk/ -name "aarch64-linux-android-gcc" | head -n 1)
            if [ -n "${NDK_TOOLCHAIN_PATH}" ]; then
              TOOLCHAIN_BASE_PATH=$(dirname ${NDK_TOOLCHAIN_PATH})
            else
              echo "Error: Cross-compilation toolchain not found. Please ensure it's synced or installed."
              exit 1
            fi
          fi

          export ARCH=arm64
          export CROSS_COMPILE="${TOOLCHAIN_BASE_PATH}/aarch64-linux-android-"
          export KERNEL_OUT=$(pwd)/../../out/target/product/generic_arm/obj/KERNEL_OBJ

          # 编译 perf
          make -C tools/perf O=${KERNEL_OUT} ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE}

      - name: Prepare perf for archiving
        run: |
          mkdir -p perf_package
          cp kernel_workspace/kernel_platform/common/tools/perf/perf perf_package/perf
          echo "perf binary prepared for archiving."

      - name: Create perf archive
        run: |
          tar -czvf perf_binary_${{ github.event.inputs.CPUD }}_${{ github.event.inputs.ANDROID_VERSION }}_${{ github.event.inputs.KERNEL_VERSION }}.tar.gz perf_package/
          echo "perf archive created."

      - name: Upload perf archive
        uses: actions/upload-artifact@v4
        with:
          name: perf-binary-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          path: perf_binary_*.tar.gz
          retention-days: 7

      - name: Verify perf installation (Optional)
        run: |
          tar -xzvf perf_binary_*.tar.gz
          ./perf_package/perf --version
          ./perf_package/perf list
