name: Compile perf

on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8750'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus_ace5_pro'
      CPUD:
        description: "处理器代号"
        required: true
        default: 'sun'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.6'

jobs:
  compile-perf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt update
          sudo apt install -y curl git build-essential libncurses-dev bison flex libssl-dev libelf-dev

      - name: Download and install repo tool
        run: |
          mkdir -p ~/.bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+x ~/.bin/repo
          echo "~/.bin" >> $GITHUB_PATH

      - name: Initialize and sync repo
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/3620603660/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo sync -c -j$(nproc --all  ) --no-tags

      - name: Remove protected exports
        run: |
          rm -rf kernel_workspace/kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
          rm -rf kernel_workspace/kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"

      - name: Set up build environment and compile kernel
        run: |
          # 定义内核源码根目录
          KERNEL_SRC_ROOT="${GITHUB_WORKSPACE}/kernel_workspace/kernel_platform/common"
          cd ${KERNEL_SRC_ROOT}

          echo "Current directory for kernel compilation:"
          pwd
          echo "Listing contents of current directory:"
          ls -la

          # --- 工具链设置 ---
          # 优先使用 repo 同步的 prebuilts
          # 如果没有，尝试使用 NDK
          TOOLCHAIN_BASE_PATH=""
          if [ -d "${GITHUB_WORKSPACE}/kernel_workspace/prebuilts/clang/host/linux-x86/clang-r450784d/bin" ] && \
             [ -d "${GITHUB_WORKSPACE}/kernel_workspace/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin" ]; then
            export PATH="${GITHUB_WORKSPACE}/kernel_workspace/prebuilts/clang/host/linux-x86/clang-r450784d/bin:${GITHUB_WORKSPACE}/kernel_workspace/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin:${PATH}"
            export CROSS_COMPILE_ARM64="${GITHUB_WORKSPACE}/kernel_workspace/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-"
            echo "Using toolchain from repo prebuilts."
          else
            NDK_ROOT=$(find /usr/local/lib/android/sdk/ndk/ -maxdepth 1 -type d -name "*-*" | head -n 1)
            if [ -n "${NDK_ROOT}" ]; then
              export PATH="${NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/bin:${NDK_ROOT}/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin:${PATH}"
              export CROSS_COMPILE_ARM64="${NDK_ROOT}/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin/aarch64-linux-android-"
              echo "Using NDK toolchain from: ${NDK_ROOT}"
            else
              echo "Error: Neither repo prebuilts nor NDK toolchain found. Please ensure your manifest is correct or NDK is installed."
              exit 1
            fi
          fi

          export ARCH=arm64
          export CROSS_COMPILE="${CROSS_COMPILE_ARM64}"
          export CLANG_TRIPLE="aarch64-linux-gnu-" # GKI 通常使用 clang，并设置 CLANG_TRIPLE

          # --- GKI 内核构建 ---
          # BUILD_CONFIG_NAME 根据您的 build.config 文件选择合适的名称
          # 假设是 gki.aarch64，您可能需要根据 FEIL 和 CPU 动态生成
          BUILD_CONFIG_NAME="gki.aarch64" # <--- 根据您的 build.config 文件选择合适的名称

          if [ ! -f "build.config.${BUILD_CONFIG_NAME}" ]; then
            echo "Error: build.config.${BUILD_CONFIG_NAME} not found. Please check your FEIL and CPU inputs or the build.config files."
            ls -l build.config.*
            exit 1
          fi

          # 定义内核编译输出目录，build.sh 会使用 OUT_DIR
          export OUT_DIR="${GITHUB_WORKSPACE}/kernel_workspace/out" # build.sh 默认输出到 REPO_ROOT/out/BRANCH
          export KERNEL_OUT="${OUT_DIR}/common/obj/KERNEL_OBJ" # 明确 perf 编译所需的 KERNEL_OBJ 路径

          echo "Compiling kernel with BUILD_CONFIG=${BUILD_CONFIG_NAME} and OUT_DIR=${OUT_DIR}"
          # 执行 GKI 内核构建脚本
          # build.sh 内部会处理 clean, defconfig, make 等步骤
          build/build.sh ${BUILD_CONFIG_NAME} -j$(nproc) # <--- 使用 GKI 构建脚本并并行编译

          # --- 编译 perf binary ---
          echo "Compiling perf binary..."
          # perf 编译通常在 KERNEL_SRC_ROOT/tools/perf 目录下进行
          # 确保 KERNEL_OUT 环境变量已设置正确
          make -C tools/perf O=${KERNEL_OUT} ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE}

      - name: Prepare perf for archiving
        run: |
          mkdir -p perf_package
          # perf 编译的最终位置通常在 KERNEL_OUT/tools/perf/perf 或 KERNEL_OUT/usr/bin/perf
          # 使用 KERNEL_OUT 变量来查找
          KERNEL_OUT_PATH="${GITHUB_WORKSPACE}/kernel_workspace/out/common/obj/KERNEL_OBJ" # 明确 KERNEL_OUT 的绝对路径

          cp "${KERNEL_OUT_PATH}/tools/perf/perf" perf_package/perf || \
          cp "${KERNEL_OUT_PATH}/usr/bin/perf" perf_package/perf || \
          (echo "Error: perf binary not found in expected locations." && exit 1)
          echo "perf binary prepared for archiving."

      - name: Create perf archive
        run: |
          tar -czvf perf_binary_${{ github.event.inputs.CPUD }}_${{ github.event.inputs.ANDROID_VERSION }}_${{ github.event.inputs.KERNEL_VERSION }}.tar.gz perf_package/
          echo "perf binary prepared for archiving."

      - name: Create perf archive
        run: |
          tar -czvf perf_binary_${{ github.event.inputs.CPUD }}_${{ github.event.inputs.ANDROID_VERSION }}_${{ github.event.inputs.KERNEL_VERSION }}.tar.gz perf_package/
          echo "perf archive created."

      - name: Upload perf archive
        uses: actions/upload-artifact@v4
        with:
          name: perf-binary-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          path: perf_binary_*.tar.gz
          retention-days: 7

      - name: Verify perf installation (Optional)
        run: |
          tar -xzvf perf_binary_*.tar.gz
          ./perf_package/perf --version
          ./perf_package/perf list