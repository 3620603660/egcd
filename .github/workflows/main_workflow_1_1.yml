name: ace5pro加入优化可选(主工作流)
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8750'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus_ace5_pro'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.6'
      KERNEL_NAME:
        description: "修改内核名称"
        required: true
        default: '-android15-8-g013ec21bba94-abogki383916444'
      ENABLE_KPM:
        type: boolean
      local_version:
        type: string
      remove_default_4k:
        type: boolean

      ENABLE_LTO:
        type: boolean
      OPTIMIZATION_PROFILE:
        description: '选择优化配置文件：default, performance, battery_save, custom'
        required: false
        default: 'default'
        type: string
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      TOKEN: ${{ secrets.TOKEN }}
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: Configure Git
        run: |
         git config --global user.name "build"
         git config --global user.email "3620603668@qq.com"
      # 1. 拉取仓库  
      - name: Checkout  
        uses: actions/checkout@v4  

      # 2. 安装构建依赖（包括 ccache）  
      - name: Install Dependencies  
        run: |
         sudo apt-get update  
         sudo apt-get install -y python3 git curl ccache libelf-dev  
      # 3. 恢复 ccache 缓存  
      - name: Restore ccache
        uses: actions/cache@v3
        with:
         path: /home/runner/.ccache
         key: ${{ runner.os }}-${{ github.repository }}-ccache-${{ github.workflow }}-v3
         restore-keys: |
          ${{ runner.os }}-${{ github.repository }}-ccache-${{ github.workflow }}-
          ${{ runner.os }}-${{ github.repository }}-
          ${{ runner.os }}-
      # 4. 设置 ccache 环境变量  
      - name: Setup ccache environment  
        run: |
         echo "CCACHE_DIR=/home/runner/.ccache" >> $GITHUB_ENV  
         echo "CCACHE_MAXSIZE=8G" >> $GITHUB_ENV  
         echo "CCACHE_COMPILERCHECK=%compiler% -dumpmachine; %compiler% -dumpversion" >> $GITHUB_ENV  
         echo "CCACHE_NOHASHDIR=true" >> $GITHUB_ENV  
         echo "CCACHE_HARDLINK=true" >> $GITHUB_ENV  
         echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV  
         echo "CCACHE_LOGFILE=${{ github.workspace }}/ccache.log" >> $GITHUB_ENV  
         echo "/usr/lib/ccache" >> $GITHUB_PATH  
         
      - name: Show ccache stats
        run: |
         ccache -s || true
      - name: Install repo tool
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo
      - name: Initialize repo and sync
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
         
      - name: Set up SukiSU
        run: |
         cd kernel_workspace/kernel_platform
         curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
         cd ./KernelSU
         KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
         echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
         export KSU_VERSION=$KSU_VERSION
         sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
      - name: Set up SUSFS & apply patches
        run: |
         set -e
         cd kernel_workspace
         git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}
         git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
         git clone https://$TOKEN@github.com/3620603660/boot.git
         cd kernel_platform
         cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch ./common/ || true
         mkdir -p ./common/fs ./common/include/linux ./common/lib ./common/crypto
         cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/ || true
         cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/ || true
         cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux || true
         cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib || true
         cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto || true
         cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/ || true
         cp ../boot/1.patch ./common/
         cd ./common
         PATCH_FILE=50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch
         if [[ -f "$PATCH_FILE" ]]; then
         sed -i 's/-32,12 +32,38/-32,11 +32,37/g' "$PATCH_FILE"
         sed -i '/#include <trace\/hooks\/fs.h>/d' "$PATCH_FILE"
         patch -p1 < "$PATCH_FILE" || true
         fi
         cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
         patch -p1 -F 3 < syscall_hooks.patch || true
         patch -s -p1 -F 3 < 1.patch
         echo "✅ SUSFS 和 syscall_hooks patch 应用完成"
      - name: Apply lz4kd Patches
        run: |
         set -e
         cd kernel_workspace/kernel_platform/common
         PATCH_FILE=../../SukiSU_patch/other/zram/zram_patch/${{ inputs.KERNEL_VERSION }}/lz4kd.patch
         if [[ -f "$PATCH_FILE" ]]; then
         cp "$PATCH_FILE" ./lz4kd.patch
         patch -p1 -F 3 < lz4kd.patch || true
         else
         echo "❗ lz4kd patch not found for kernel version ${{ inputs.KERNEL_VERSION }}"
         fi

          


      - name: 启用kpm
        if: ${{ fromJSON(github.event.inputs.ENABLE_KPM) }}
        run: |
         cd kernel_workspace/kernel_platform
         echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
         sudo sed -i 's/check_defconfig//' ./common/build.config.gki
         cd common
         git add -A && git commit -a -m "BUILD Kernel"

      - name: 启用LTO
        if: ${{ fromJSON(github.event.inputs.ENABLE_LTO) }}
        run: |
         cd kernel_workspace/kernel_platform
         echo "CONFIG_LTO_CLANG=y" >> ./common/arch/arm64/configs/gki_defconfig
         echo "CONFIG_LTO_CLANG_THIN=y" >> ./common/arch/arm64/configs/gki_defconfig
         sudo sed -i 's/check_defconfig//' ./common/build.config.gki
         cd common
         git add -A && git commit -a -m "BUILD Kernel with LTO enabled"

      - name: Add make name
        run: |
         cd kernel_workspace/kernel_platform
         sed -i '186s|echo ".*"|echo "${KERNELVERSION}${scm_version}${config_localversion}"|' common/scripts/setlocalversion
         sed -i "s/\${scm_version}/${{ github.event.inputs.KERNEL_NAME }}/g" ./common/scripts/setlocalversion
         
      - name: 设置 CONFIG_LOCALVERSION
        run: |
         cd kernel_workspace/kernel_platform
         echo 'CONFIG_LOCALVERSION="${{ github.event.inputs.local_version }}"' >> ./common/arch/arm64/configs/gki_defconfig

      - name: 删除 CONFIG_LOCALVERSION 中的 -4k 后缀（如果勾选）
        if: ${{ fromJSON(github.event.inputs.remove_default_4k) }}
        run: |
         cd kernel_workspace/kernel_platform
         sed -i 's/-4k//' ./common/arch/arm64/configs/gki_defconfig
    
      - name: Add sched_ext
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/3620603660/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git
         
      - name: Set build timestamp
        run: |         
         export SOURCE_DATE_EPOCH=$(date -d "Tue Dec 17 23:36:49 UTC 2024" +%s)
         echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV
         
      # 5. 编译内核   
      - name: Build Kernel
        run: |
         # 加入 clang 到 PATH
         export PATH="${{ github.workspace }}/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
         # 加入 ccache 到 PATH
         export PATH="/usr/lib/ccache:$PATH" 
         # 设置固定内核构建时间
         export KERNEL_TIME="Tue Dec 17 23:36:49 UTC 2024"
         export KBUILD_BUILD_TIMESTAMP="$KERNEL_TIME"
         export SOURCE_DATE_EPOCH=$(date -d "$KERNEL_TIME" +%s)
         # 打印验证
         echo "KERNEL_TIME = $KERNEL_TIME"
         echo "SOURCE_DATE_EPOCH = $SOURCE_DATE_EPOCH"
         # 设置基础构建参数
         export MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang \
         RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
         PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
         LD=ld.lld HOSTLD=ld.lld O=out SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH}"
         echo "Using SOURCE_DATE_EPOCH: $SOURCE_DATE_EPOCH"
         # 进入源码目录
         cd kernel_workspace/kernel_platform/common
         # 执行 defconfig
         make -j$(nproc) $MAKE_ARGS gki_defconfig
         # 编译内核（使用 -O3 优化，关闭 warning->error）
         KBUILD_CFLAGS='-O3' KCFLAGS='-Wno-error' make -j$(nproc) $MAKE_ARGS all
         echo "Checking compiled optimization level:"
         find out/ -name '*.cmd' | xargs grep -- '-O' | grep -v 'O2' | head
         echo "Checking if ThinLTO was applied:"
         find out/ -name '*.cmd' | xargs grep -E '\-flto(=thin)?' | head
         # 创建输出目录并复制 Image
         mkdir -p ../dist
         cp out/arch/arm64/boot/Image ../dist/
         
      # 6. 打印 ccache 使用统计
      - name: Show ccache stats
        run: ccache -s || true

      - name: 验证内核构建时间
        run: |
         strings kernel_workspace/kernel_platform/common/out/vmlinux | grep "UTC"

      - name: Make AnyKernel3 patch (optional)
        if: ${{ fromJSON(github.event.inputs.ENABLE_KPM) }}
        run: |
          cd kernel_workspace/kernel_platform/dist
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image

      - name: Prepare AnyKernel3 package
        run: |
          cd kernel_workspace/kernel_platform/dist
          git clone https://github.com/3620603660/AnyKernel3.git AnyKernel3 --depth=1
          rm -rf AnyKernel3/.git
          rm -f AnyKernel3/push.sh
          cp Image AnyKernel3/
      - name: Upload AnyKernel3 artifact
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_${{ github.event.inputs.FEIL }}_${{ env.KSUVER }}
          path: kernel_workspace/kernel_platform/dist/AnyKernel3/*









      - name: Apply Optimization Profile
        run: |
          cd kernel_workspace/kernel_platform
          case "${{ github.event.inputs.OPTIMIZATION_PROFILE }}" in
            performance)
              echo "CONFIG_EEVDF_CUSTOM_PARAMS=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_EEVDF_LATENCY_NICE_LEVEL=0" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_CPU_FREQ_GOV_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_ZRAM=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_ZSWAP=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_ZRAM_LZ4_COMPRESS=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_ZSWAP_COMPRESSOR_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_MQ_DEADLINE=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_BFQ_GROUP_IOSCHED=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_WRITEBACK_CENTRIC_FS=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_GPU_OPTIMIZATION_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_NPU_TASK_OFFLOAD=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_COMPILER_OPTIMIZATION_FLAGS=\"-O3 -march=armv8.2-a+sve -mtune=cortex-a76\"" >> ./common/arch/arm64/configs/gki_defconfig
              ;;
            battery_save)
              echo "CONFIG_CPU_FREQ_GOV_POWERSAVE=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_CPU_IDLE_GOV_LADDER=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_ZRAM=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_ZSWAP=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_ZRAM_LZ4_COMPRESS=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_ZSWAP_COMPRESSOR_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_IO_SCHED_NOOP=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_FILESYSTEM_CACHE_LAZYWRITE=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_GPU_OPTIMIZATION_POWERSAVE=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_COMPILER_OPTIMIZATION_FLAGS=\"-Os\"" >> ./common/arch/arm64/configs/gki_defconfig
              ;;
            custom)
              # Custom settings, can be expanded later
              ;;
            *)
              # Default settings
              echo "CONFIG_EEVDF_CUSTOM_PARAMS=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_EEVDF_LATENCY_NICE_LEVEL=0" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_ZRAM=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_ZSWAP=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_ZRAM_LZ4_COMPRESS=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_ZSWAP_COMPRESSOR_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_MQ_DEADLINE=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_BFQ_GROUP_IOSCHED=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_WRITEBACK_CENTRIC_FS=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_GPU_OPTIMIZATION_BALANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_COMPILER_OPTIMIZATION_FLAGS=\"-O2\"" >> ./common/arch/arm64/configs/gki_defconfig
              ;;
          esac
          cd common
          git add -A && git commit -a -m "Apply optimization profile"


