name: ace5pro加入afdo(其它优化)
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8750'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus_ace5_pro'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.6'
      KERNEL_NAME:
        description: "修改内核名称"
        required: true
        default: '-android15-8-g013ec21bba94-abogki383916444'
      ENABLE_KPM:
        description: "启用kpm"
        required: false
        default: false
        type: boolean
      local_version:
        description: '输入内核后缀名（如-v8）'
        required: false
        default: '-4k'
        type: string
      kernel_time:
        description: '内核构建时间（UTC 时间字符串，例如 "Tue Dec 17 23:36:49 UTC 2024"）'
        required: false
        default: 'Tue Dec 17 23:36:49 UTC 2024'
        type: string
      ENABLE_LTO:
        description: '启用 LTO'
        required: false
        default: false
        type: boolean
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      TOKEN: ${{ secrets.TOKEN }}
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: Configure Git
        run: |
         git config --global user.name "build"
         git config --global user.email "3620603668@qq.com"

      # 1. 拉取仓库  
      - name: Checkout  
        uses: actions/checkout@v4  

      # 2. 安装构建依赖（包括 ccache）  
      - name: Install Dependencies  
        run: |  
         sudo apt-get update  
         sudo apt-get install -y python3 git curl ccache libelf-dev  

      # 3. 恢复 ccache 缓存  
      - name: Restore ccache
        uses: actions/cache@v4
        with:
         path: /home/runner/.ccache
         key: ${{ runner.os }}-${{ github.repository }}-v3
         restore-keys: |
          ${{ runner.os }}-${{ github.repository }}-ccache-${{ github.workflow }}-
          ${{ runner.os }}-${{ github.repository }}-
          ${{ runner.os }}-

      # 4. 设置 ccache 环境变量  
      - name: Setup ccache environment  
        run: |  
         echo "CCACHE_DIR=/home/runner/.ccache" >> $GITHUB_ENV  
         echo "CCACHE_MAXSIZE=8G" >> $GITHUB_ENV  
         echo "CCACHE_COMPILERCHECK=%compiler% -dumpmachine; %compiler% -dumpversion" >> $GITHUB_ENV  
         echo "CCACHE_NOHASHDIR=true" >> $GITHUB_ENV  
         echo "CCACHE_HARDLINK=true" >> $GITHUB_ENV  
         echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV  
         echo "CCACHE_LOGFILE=${{ github.workspace }}/ccache.log" >> $GITHUB_ENV  
         echo "/usr/lib/ccache" >> $GITHUB_PATH  
         
      - name: Show ccache stats
        run: |
         ccache -s || true

      - name: Install repo tool
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
         
      - name: Set up SukiSU
        run: |
         cd kernel_workspace/kernel_platform
         curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
         cd ./KernelSU
         KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
         echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
         export KSU_VERSION=$KSU_VERSION
         sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Set up SUSFS & apply patches
        run: |
         set -e
         cd kernel_workspace
         git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}
         git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
         git clone https://$TOKEN@github.com/3620603660/boot.git
         cd kernel_platform
         cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch ./common/ || true
         mkdir -p ./common/fs ./common/include/linux ./common/lib ./common/crypto
         cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/ || true
         cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/ || true
         cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux || true
         cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib || true
         cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto || true
         cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/ || true
         cp ../boot/1.patch ./common/
         cd ./common
         PATCH_FILE=50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch
         if [[ -f "$PATCH_FILE" ]]; then
         sed -i 's/-32,12 +32,38/-32,11 +32,37/g' "$PATCH_FILE"
         sed -i '/#include <trace\/hooks\/fs.h>/d' "$PATCH_FILE"
         patch -p1 < "$PATCH_FILE" || true
         fi
         cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
         patch -p1 -F 3 < syscall_hooks.patch || true
         patch -s -p1 -F 3 < 1.patch
         echo "✅ SUSFS 和 syscall_hooks patch 应用完成"

      - name: 🔧 Update compression algorithms (更新压缩算法)
        run: |
          cd kernel_workspace/kernel_platform/common
          
          # 更新LZ4实现
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4_decompress.c
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4defs.h
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4_compress.c
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4hc_compress.c
          
          # 更新Zstd实现
          zstd_base="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/zstd"
          mkdir -p lib/zstd && cd lib/zstd
          curl -sSL $zstd_base/zstd_common_module.c -o common.c
          curl -sSL $zstd_base/compress/zstd_compress_module.c -o compress.c
          curl -sSL $zstd_base/decompress/zstd_decompress_module.c -o decompress.c
          curl -sSL $zstd_base/zstd_compat.h -o compat.h
          
          cd ../../..
          echo "✅ LZ4/Zstd 算法更新完成"

      - name: Apply lz4kd Patches
        run: |
         set -e
         cd kernel_workspace/kernel_platform/common
         PATCH_FILE=../../SukiSU_patch/other/zram/zram_patch/${{ inputs.KERNEL_VERSION }}/lz4kd.patch
         if [[ -f "$PATCH_FILE" ]]; then
         cp "$PATCH_FILE" ./lz4kd.patch
         patch -p1 -F 3 < lz4kd.patch || true
         else
         echo "❗ lz4kd patch not found for kernel version ${{ inputs.KERNEL_VERSION }}"
         fi

      - name: Add SUSFS Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          # Add VFS configuration settings
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          # 确保所有必需的压缩算法都已启用
          echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 LZ4HC 加密
          echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 LZ4K 加密
          echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 LZ4KD 加密
          echo "CONFIG_F2FS_FS_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统 LZ4HC 压缩
          echo "CONFIG_CRYPTO_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 ZSTD 加密
          echo "CONFIG_CRYPTO_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 LZ4 加密

          # 启用 ZRAM 及其压缩选项
          echo "CONFIG_ZRAM=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 ZRAM
          echo "CONFIG_ZRAM_LZ4_COMPRESS=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 ZRAM LZ4 压缩
          echo "CONFIG_ZRAM_LZ4KD_COMPRESS=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 ZRAM LZ4KD 压缩
          echo "CONFIG_ZRAM_ZSTD_COMPRESS=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 ZRAM ZSTD 压缩
          echo "CONFIG_ZRAM_MULTI_COMP=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 ZRAM 多压缩器支持

          # 添加 BBR 和通用 Linux 优化设置
          echo "CONFIG_HZ_250=y" >> ./common/arch/arm64/configs/gki_defconfig # 设置时钟频率为 250Hz
          echo "CONFIG_NO_HZ_IDLE=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用空闲时无时钟节拍
          echo "CONFIG_NET_SCHED=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用网络调度
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用高级 TCP 拥塞控制
          echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 BBR TCP 拥塞控制算法
          echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 FQ 网络调度器
          echo "CONFIG_TCP_CONG_BIC=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 BIC TCP 拥塞控制算法
          echo "CONFIG_TCP_CONG_CUBIC=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 CUBIC TCP 拥塞控制算法
          echo "CONFIG_TCP_CONG_WESTWOOD=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 WESTWOOD TCP 拥塞控制算法
          echo "CONFIG_TCP_CONG_HTCP=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 HTCP TCP 拥塞控制算法
          echo "CONFIG_TCP_CONG_BBR3=y" >> ./common/arch/arm64/configs/gki_defconfig #启用 BBR3 TCP拥塞控制算法
          echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_INET=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_RX_BUSY_POLL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_RX_BUSY_READ=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_SCHED_EEVDF=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 EEVDF 调度器
          echo "CONFIG_F2FS_FS=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统
          echo "CONFIG_F2FS_STAT_FS=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 统计信息
          echo "CONFIG_F2FS_FS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 扩展属性
          echo "CONFIG_F2FS_FS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS POSIX ACL
          echo "CONFIG_F2FS_FS_SECURITY=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 安全性
          echo "CONFIG_F2FS_CHECK_FS=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统检查
          echo "CONFIG_F2FS_IOSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS IO 统计
          echo "CONFIG_F2FS_FAULT_INJECTION=n" >> ./common/arch/arm64/configs/gki_defconfig # 禁用 F2FS 故障注入
          echo "CONFIG_F2FS_HW_PCI_ROM=n" >> ./common/arch/arm64/configs/gki_defconfig # 禁用 F2FS 硬件 PCI ROM
          echo "CONFIG_F2FS_FS_ENCRYPTION=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统加密
          echo "CONFIG_F2FS_FS_COMPRESSION=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统压缩
          echo "CONFIG_F2FS_FS_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统 LZ4 压缩
          echo "CONFIG_F2FS_FS_LZO=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统 LZO 压缩
          echo "CONFIG_F2FS_FS_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 F2FS 文件系统 ZSTD 压缩
          sed -i 's/check_defconfig//' ./common/build.config.gki # 移除 build.config.gki 中的 check_defconfig

          # I/O调度器优化
          echo "CONFIG_BLK_MQ_IOSCHED_DEADLINE=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用mq-deadline I/O调度器
          echo "CONFIG_BLK_MQ_IOSCHED_KYBER=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用kyber I/O调度器
          echo "CONFIG_BLK_MQ_IOSCHED_BFQ=y" >> ./common/arch/arm64/configs/gki_defconfig # Enable BFQ I/O scheduler
          echo "CONFIG_BLK_MQ_IOSCHED_NONE=y" >> ./common/arch/arm64/configs/gki_defconfig # Enable NONE I/O scheduler
          echo "CONFIG_DEFAULT_IOSCHED=\"BFQ\"" >> ./common/arch/arm64/configs/gki_defconfig # Set BFQ as default I/O scheduler
          echo "CONFIG_IO_URING_ASYNC_WORK=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用 io_uring 异步工作队列
          echo "CONFIG_PAGE_POOL=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用页面池优化
          echo "CONFIG_TRANSPARENT_HUGEPAGE_MADVISE=y" >> ./common/arch/arm64/configs/gki_defconfig # 启用透明大页（MADVISE模式）

          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"
          
      - name: 启用kpm
        if: ${{ fromJSON(github.event.inputs.ENABLE_KPM) }}
        run: |
         cd kernel_workspace/kernel_platform
         echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
         sed -i 's/check_defconfig//' ./common/build.config.gki
         cd common
         git add -A && git commit -a -m "BUILD Kernel"

      - name: 启用LTO
        if: ${{ fromJSON(github.event.inputs.ENABLE_LTO) }}
        run: |
         cd kernel_workspace/kernel_platform
         echo "CONFIG_LTO_CLANG=y" >> ./common/arch/arm64/configs/gki_defconfig
         echo "CONFIG_LTO_CLANG_THIN=y" >> ./common/arch/arm64/configs/gki_defconfig
         echo "CONFIG_LTO_POLLY=y" >> ./common/arch/arm64/configs/gki_defconfig
         sed -i 's/check_defconfig//' ./common/build.config.gki
         cd common
         git add -A && git commit -a -m "BUILD Kernel with LTO enabled"

      - name: Add make name
        run: |
         cd kernel_workspace/kernel_platform
         sed -i '186s|echo ".*"|echo "${KERNELVERSION}${scm_version}${config_localversion}"|' common/scripts/setlocalversion
         sed -i "s/\${scm_version}/${{ github.event.inputs.KERNEL_NAME }}/g" ./common/scripts/setlocalversion

      - name: 设置 CONFIG_LOCALVERSION
        run: |
         cd kernel_workspace/kernel_platform
         echo 'CONFIG_LOCALVERSION="${{ github.event.inputs.local_version }}"' >> ./common/arch/arm64/configs/gki_defconfig

    
      - name: 拉取并集成 sched_ext 调度器
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/3620603660/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git

      - name: 拉取afdo
        run: |
          cd kernel_workspace/kernel_platform/
          git clone https://github.com/3620603660/afdo.git
            

   
      - name: Build Kernel
        run: |
         # 加入 clang 到 PATH
         export PATH="${{ github.workspace }}/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
         # 加入 ccache 到 PATH
         export PATH="/usr/lib/ccache:$PATH" 

         # 设置固定内核构建时间
         export KERNEL_TIME="${{ github.event.inputs.kernel_time }}"
         export KBUILD_BUILD_TIMESTAMP="$KERNEL_TIME"
         export SOURCE_DATE_EPOCH=$(date -d "$KERNEL_TIME" +%s)
         export AFDO_PROFILE="${{ github.workspace }}/kernel_workspace/kernel_platform/afdo/kernel.afdo"
         if [ ! -f "$AFDO_PROFILE" ]; then
           echo "Error: AFDO profile not found at $AFDO_PROFILE"
         exit 1
         fi

         # 打印验证
         echo "KERNEL_TIME = $KERNEL_TIME"
         echo "SOURCE_DATE_EPOCH = $SOURCE_DATE_EPOCH"
         echo "Using KCFLAGS: -Wno-error -fauto-profile=$AFDO_PROFILE"

         # 设置一些通用参数（便于后续维护）
         export KCFLAGS="-Wno-error -fauto-profile=$AFDO_PROFILE -O2"
         export MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang \
         RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
         PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
         LD=ld.lld HOSTLD=ld.lld O=out SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH}"

         # 进入源码目录
         cd kernel_workspace/kernel_platform/common

         # 执行 defconfig
         make -j$(nproc) $MAKE_ARGS gki_defconfig

         # 编译全部目标
         make -j$(nproc) $MAKE_ARGS all

         # 创建输出目录并复制 Image
         mkdir -p ../dist
         cp out/arch/arm64/boot/Image ../dist/

      - name: 验证内核构建时间
        run: |
         strings kernel_workspace/kernel_platform/common/out/vmlinux | grep "UTC"

      - name: Make AnyKernel3 patch (optional)
        if: ${{ fromJSON(github.event.inputs.ENABLE_KPM) }}
        run: |
          cd kernel_workspace/kernel_platform/dist
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image

      - name: Prepare AnyKernel3 package
        run: |
          cd kernel_workspace/kernel_platform/dist
          git clone https://github.com/3620603660/AnyKernel3.git AnyKernel3 --depth=1
          rm -rf AnyKernel3/.git
          rm -f AnyKernel3/push.sh
          cp Image AnyKernel3/

      - name: Upload AnyKernel3 artifact
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_oneplus_ace5pro_${{ env.KSUVER }}_sukisu
          path: kernel_workspace/kernel_platform/dist/AnyKernel3/*
