name: ace5pro(‰∏ªÂ∑•‰ΩúÊµÅksun)
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "ÂàÜÊîØ"
        required: true
        default: 'sm8750'
      FEIL:
        description: "ÈÖçÁΩÆÊñá‰ª∂"
        required: true
        default: 'oneplus_ace5_pro'
      ANDROID_VERSION:
        description: "ÂÜÖÊ†∏ÂÆâÂçìÁâàÊú¨"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "ÂÜÖÊ†∏ÁâàÊú¨"
        required: true
        default: '6.6'
      KERNEL_NAME:
        description: "‰øÆÊîπÂÜÖÊ†∏ÂêçÁß∞"
        required: true
        default: '-android15-8-g013ec21bba94-abogki383916444'
      local_version:
        description: 'ËæìÂÖ•ÂÜÖÊ†∏ÂêéÁºÄÂêçÔºàÂ¶Ç-v8Ôºâ'
        required: false
        default: '-4k'
        type: string
      kernel_time:
        description: 'ÂÜÖÊ†∏ÊûÑÂª∫Êó∂Èó¥ÔºàUTC Êó∂Èó¥Â≠óÁ¨¶‰∏≤Ôºå‰æãÂ¶Ç "Tue Dec 17 23:36:49 UTC 2024"Ôºâ'
        required: false
        default: 'Tue Dec 17 23:36:49 UTC 2024'
        type: string
      ENABLE_LTO:
        description: 'ÂêØÁî® LTO'
        required: false
        default: false
        type: boolean
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TOKEN: ${{ secrets.TOKEN }}
      # ÂÆö‰πâ‰∏Ä‰∫õÂ∏∏Áî®ÁöÑË∑ØÂæÑÂèòÈáèÔºåÈÅøÂÖçÈáçÂ§çËæìÂÖ•
      KERNEL_WORKSPACE: ${{ github.workspace }}/kernel_workspace
      KERNEL_PLATFORM: ${{ github.workspace }}/kernel_workspace/kernel_platform
      COMMON_DIR: ${{ github.workspace }}/kernel_workspace/kernel_platform/common

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: Configure Git
        run: |
         git config --global user.name "build"
         git config --global user.email "3620603668@qq.com"

      # 1. ÊãâÂèñ‰ªìÂ∫ì  
      - name: Checkout  
        uses: actions/checkout@v4
        with:
          # ‰ªÖÊãâÂèñÂΩìÂâçÊèê‰∫§ÔºåÂáèÂ∞ë‰∏ãËΩΩÈáèÔºåÂä†Âø´ÈÄüÂ∫¶
          fetch-depth: 1

      # 2. ÂÆâË£ÖÊûÑÂª∫‰æùËµñÔºàÂåÖÊã¨ ccacheÔºâ  
      - name: Install Dependencies  
        run: |
         sudo apt-get update  
         sudo apt-get install -y python3 git curl ccache libelf-dev  

      # 3. ÊÅ¢Â§ç ccache ÁºìÂ≠ò  
      - name: Restore ccache
        uses: actions/cache@v3
        with:
         path: /home/runner/.ccache
         key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref_name }}-${{ hashFiles('**/kernel_workspace/kernel_platform/common/arch/arm64/configs/gki_defconfig') }}-v4 # Â¢ûÂä† hashFilesÔºåÂΩì defconfig ÊîπÂèòÊó∂Â§±ÊïàÁºìÂ≠ò
         restore-keys: |
          ${{ runner.os }}-${{ github.repository }}-${{ github.ref_name }}-
          ${{ runner.os }}-${{ github.repository }}-
          ${{ runner.os }}-
          ccache-

      # 4. ËÆæÁΩÆ ccache ÁéØÂ¢ÉÂèòÈáè  
      - name: Setup ccache environment  
        run: |
         echo "CCACHE_DIR=/home/runner/.ccache" >> $GITHUB_ENV  
         echo "CCACHE_MAXSIZE=8G" >> $GITHUB_ENV  
         echo "CCACHE_COMPILERCHECK=%compiler% -dumpmachine; %compiler% -dumpversion" >> $GITHUB_ENV  
         echo "CCACHE_NOHASHDIR=true" >> $GITHUB_ENV  
         echo "CCACHE_HARDLINK=true" >> $GITHUB_ENV  
         echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV  
         echo "CCACHE_LOGFILE=${{ github.workspace }}/ccache.log" >> $GITHUB_ENV  
         echo "/usr/lib/ccache" >> $GITHUB_PATH  
         
      - name: Show ccache stats
        run: |
         ccache -s || true

      - name: Install repo tool
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
         mkdir -p ${{ env.KERNEL_WORKSPACE }} && cd ${{ env.KERNEL_WORKSPACE }}
         repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         # ‰ΩøÁî® find ÂëΩ‰ª§Êõ¥ÂÅ•Â£ÆÂú∞Âà†Èô§Êñá‰ª∂
         find kernel_platform/common/android/ -name "abi_gki_protected_exports_*" -delete || echo "No common protected exports!"
         find kernel_platform/msm-kernel/android/ -name "abi_gki_protected_exports_*" -delete || echo "No msm-kernel protected exports!"
         
      - name: Set up KernelSU Next
        run: |
          cd ${{ env.KERNEL_PLATFORM }}
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          cd KernelSU-Next
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10200)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Set up SUSFS & apply patches
        run: |
         set -e

         cd ${{ env.KERNEL_WORKSPACE }}
         git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}
         git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
         git clone --depth=1 https://github.com/3620603660/boot.git
         git clone --depth=1 https://github.com/WildPlusKernel/kernel_patches.git # ‰ªÖÊãâÂèñÊúÄÊñ∞Êèê‰∫§
         
         cd ${{ env.KERNEL_PLATFORM }}
         cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
         cp ../kernel_patches/next/syscall_hooks.patch ./common/
         cp ../kernel_patches/next/0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch ./KernelSU-Next/
         cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
         cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
         # ‰ΩøÁî® find ÂëΩ‰ª§Êõ¥ÂÅ•Â£ÆÂú∞Â§çÂà∂Êñá‰ª∂ÔºåÂπ∂ÈÅøÂÖçÈáçÂ§çÁöÑ || true
         find ../SukiSU_patch/other/zram/lz4k/include/linux/ -name "*" -exec cp {} ./common/include/linux/ \; || true
         find ../SukiSU_patch/other/zram/lz4k/lib/ -name "*" -exec cp {} ./common/lib/ \; || true
         find ../SukiSU_patch/other/zram/lz4k/crypto/ -name "*" -exec cp {} ./common/crypto/ \; || true
         find ../SukiSU_patch/other/zram/lz4k_oplus/ -name "*" -exec cp -r {} ./common/lib/ \; || true
         cp ../boot/1.patch ./common/
         
         cd ./KernelSU-Next
         patch -p1 < 0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch || true
         
         cd ../common
         if [[ "${{ github.event.inputs.FEIL }}" == "oneplus_13" || "${{ github.event.inputs.FEIL }}" == "oneplus_ace5_pro" ]]; then
           sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch
           sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch
         fi
         patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
         cp ../../kernel_patches/69_hide_stuff.patch ./
         patch -p1 -F 3 < 69_hide_stuff.patch
         patch -p1 -F 3 < syscall_hooks.patch
         patch -p1 -F 3 < 1.patch
         echo "‚úÖ SUSFS Âíå syscall_hooks patch Â∫îÁî®ÂÆåÊàê"

      - name: üîß Update compression algorithms (Êõ¥Êñ∞ÂéãÁº©ÁÆóÊ≥ï)
        run: |
          cd ${{ env.COMMON_DIR }}
          
          # Êõ¥Êñ∞LZ4ÂÆûÁé∞
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4_decompress.c
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4defs.h
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4_compress.c
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4hc_compress.c
          
          # Êõ¥Êñ∞ZstdÂÆûÁé∞
          zstd_base="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/zstd"
          mkdir -p lib/zstd && cd lib/zstd
          curl -sSL $zstd_base/zstd_common_module.c -o common.c
          curl -sSL $zstd_base/compress/zstd_compress_module.c -o compress.c
          curl -sSL $zstd_base/decompress/zstd_decompress_module.c -o decompress.c
          curl -sSL $zstd_base/zstd_compat.h -o compat.h
          
          cd ../../..
          echo "‚úÖ LZ4/Zstd ÁÆóÊ≥ïÊõ¥Êñ∞ÂÆåÊàê"

      - name: Apply lz4kd Patches
        run: |
         set -e
         cd ${{ env.COMMON_DIR }}
         PATCH_FILE=../../SukiSU_patch/other/zram/zram_patch/${{ inputs.KERNEL_VERSION }}/lz4kd.patch
         if [[ -f "$PATCH_FILE" ]]; then
           cp "$PATCH_FILE" ./lz4kd.patch
           patch -p1 -F 3 < lz4kd.patch || true
         else
           echo "‚ùó lz4kd patch not found for kernel version ${{ inputs.KERNEL_VERSION }}"
         fi

      - name: Add SUSFS Configuration Settings
        run: |
          cd ${{ env.COMMON_DIR }}
          # ‰ΩøÁî® heredoc ÁÆÄÂåñÈÖçÁΩÆÂÜôÂÖ•ÔºåÈÅøÂÖçÂ§ßÈáèÈáçÂ§çÁöÑ echo
          cat << EOF >> arch/arm64/configs/gki_defconfig
          CONFIG_KSU=y
          CONFIG_KSU_KPROBES_HOOK=n
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_CRYPTO_LZ4HC=y
          CONFIG_CRYPTO_LZ4K=y
          CONFIG_CRYPTO_LZ4KD=y
          CONFIG_CRYPTO_842=y
          CONFIG_KSU_SUSFS_SUS_PATH=n
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          # Add BBR and general Linux optimization settings
          CONFIG_TCP_CONG_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_SCHED_EEVDF=y
          CONFIG_F2FS_FS=y
          CONFIG_F2FS_STAT_FS=y
          CONFIG_F2FS_FS_XATTR=y
          CONFIG_F2FS_FS_POSIX_ACL=y
          CONFIG_F2FS_FS_SECURITY=y
          CONFIG_F2FS_CHECK_FS=y
          CONFIG_F2FS_IOSTAT=y
          CONFIG_F2FS_FAULT_INJECTION=n
          CONFIG_F2FS_HW_PCI_ROM=n
          CONFIG_F2FS_FS_ENCRYPTION=y
          CONFIG_F2FS_FS_COMPRESSION=y
          CONFIG_F2FS_FS_LZ4=y
          CONFIG_F2FS_FS_LZO=y
          CONFIG_F2FS_FS_ZSTD=y
          # Á°Æ‰øùÊâÄÊúâÂøÖÈúÄÁöÑÂéãÁº©ÁÆóÊ≥ïÈÉΩÂ∑≤ÂêØÁî®
          CONFIG_CRYPTO_LZ4HC=y
          CONFIG_CRYPTO_LZ4K=y
          CONFIG_CRYPTO_LZ4KD=y
          CONFIG_CRYPTO_ZSTD=y
          CONFIG_CRYPTO_LZ4=y
          CONFIG_CRYPTO_842=y
          CONFIG_NET_SCHED=y
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_CUBIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          CONFIG_DEFAULT_TCP_CONG=bbr
          # ÂêØÁî® ZRAM ÂèäÂÖ∂ÂéãÁº©ÈÄâÈ°π
          CONFIG_ZRAM=y
          CONFIG_ZRAM_LZ4_COMPRESS=y
          CONFIG_ZRAM_LZ4KD_COMPRESS=y
          CONFIG_ZRAM_ZSTD_COMPRESS=y
          CONFIG_ZRAM_MULTI_COMP=y
          CONFIG_CPU_IDLE=y
          CONFIG_CPU_IDLE_GOV_MENU=y
          CONFIG_WRITEBACK=y
          CONFIG_NO_HZ_COMMON=y
          CONFIG_QCOM_CPUIDLE=y
          CONFIG_SCHED_EAS=y
          CONFIG_CPU_ENERGY_PERF_POLICY=y
          CONFIG_CPUFREQ=y
          CONFIG_CPUFREQ_GOV_SCHEDUTIL=y
          CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND=y
          CONFIG_DEVFREQ_GOV_PERFORMANCE=y
          CONFIG_DEVFREQ_GOV_POWERSAVE=y
          # I/OË∞ÉÂ∫¶Âô®‰ºòÂåñ
          CONFIG_BLK_MQ_IOSCHED_DEADLINE=y
          CONFIG_BLK_MQ_IOSCHED_KYBER=y
          CONFIG_SCHED_EEVDF=y
          CONFIG_BLK_MQ_IOSCHED_BFQ=y
          CONFIG_BLK_MQ_IOSCHED_NONE=y
          CONFIG_DEFAULT_IOSCHED="BFQ"
          CONFIG_IO_URING_ASYNC_WORK=y
          CONFIG_PAGE_POOL=y
          EOF
          
          sed -i 's/check_defconfig//' build.config.gki
          git add -A && git commit -a -m "BUILD Kernel"

      - name: ÂêØÁî®LTO
        if: ${{ fromJSON(github.event.inputs.ENABLE_LTO) }}
        run: |
         cd ${{ env.COMMON_DIR }}
         echo "CONFIG_LTO_CLANG=y" >> arch/arm64/configs/gki_defconfig
         echo "CONFIG_LTO_CLANG_THIN=y" >> arch/arm64/configs/gki_defconfig
         # sed -i 's/check_defconfig//' build.config.gki # Ê≠§Ë°åÂ∑≤Âú®‰∏ä‰∏ÄJob‰∏≠ÊâßË°åÔºåÂèØÁßªÈô§
         git add -A && git commit -a -m "BUILD Kernel with LTO enabled"

      - name: Add make name
        run: |
         cd ${{ env.COMMON_DIR }}
         sed -i '186s|echo ".*"|echo "${KERNELVERSION}${scm_version}${config_localversion}"|' scripts/setlocalversion
         sed -i "s/\${scm_version}/${{ github.event.inputs.KERNEL_NAME }}/g" scripts/setlocalversion
         
      - name: ËÆæÁΩÆ CONFIG_LOCALVERSION
        run: |
         cd ${{ env.COMMON_DIR }}
         echo 'CONFIG_LOCALVERSION="${{ github.event.inputs.local_version }}"' >> arch/arm64/configs/gki_defconfig
    
      - name: ÊãâÂèñÂπ∂ÈõÜÊàê sched_ext Ë∞ÉÂ∫¶Âô®
        run: |
         cd ${{ env.KERNEL_PLATFORM }}
         git clone --depth=1 https://github.com/3620603660/sched_ext.git # ‰ªÖÊãâÂèñÊúÄÊñ∞Êèê‰∫§
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git

      - name: ÊãâÂèñafdo
        run: |
          cd ${{ env.KERNEL_PLATFORM }}
          git clone --depth=1 https://github.com/3620603660/afdo.git # ‰ªÖÊãâÂèñÊúÄÊñ∞Êèê‰∫§
            
      - name: Set build timestamp
        run: |
         # Áõ¥Êé•‰ΩøÁî®ËæìÂÖ•ÂèÇÊï∞‰Ωú‰∏∫ÁéØÂ¢ÉÂèòÈáèÔºåÈÅøÂÖçÈáçÂ§çÂÆö‰πâ
         echo "SOURCE_DATE_EPOCH=$(date -d "${{ github.event.inputs.kernel_time }}" +%s)" >> $GITHUB_ENV
         echo "KBUILD_BUILD_TIMESTAMP=${{ github.event.inputs.kernel_time }}" >> $GITHUB_ENV
   
      - name: Build Kernel
        run: |
         # Âä†ÂÖ• clang Âà∞ PATH
         export PATH="${{ github.workspace }}/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
         # Âä†ÂÖ• ccache Âà∞ PATH
         export PATH="/usr/lib/ccache:$PATH" 

         # ËÆæÁΩÆÂõ∫ÂÆöÂÜÖÊ†∏ÊûÑÂª∫Êó∂Èó¥
         export KERNEL_TIME="Tue Dec 17 23:36:49 UTC 2024"
         export KBUILD_BUILD_TIMESTAMP="$KERNEL_TIME"
         export SOURCE_DATE_EPOCH=$(date -d "$KERNEL_TIME" +%s)
         # ËÆæÁΩÆ AFDO ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ
         export AFDO_PROFILE="${{ github.workspace }}/kernel_workspace/kernel_platform/afdo/kernel.afdo"
         if [ ! -f "$AFDO_PROFILE" ]; then
           echo "Error: AFDO profile not found at $AFDO_PROFILE"
         exit 1
         fi

         # ÊâìÂç∞È™åËØÅ
         echo "KERNEL_TIME = $KERNEL_TIME"
         echo "SOURCE_DATE_EPOCH = $SOURCE_DATE_EPOCH"
         echo "Using KCFLAGS: -Wno-error -fauto-profile=$AFDO_PROFILE"

         # ËÆæÁΩÆ‰∏Ä‰∫õÈÄöÁî®ÂèÇÊï∞Ôºà‰æø‰∫éÂêéÁª≠Áª¥Êä§Ôºâ
         export KCFLAGS="-Wno-error -fauto-profile=$AFDO_PROFILE"
         export MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang \
         RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
         PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
         LD=ld.lld HOSTLD=ld.lld O=out SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH}"

         # ËøõÂÖ•Ê∫êÁ†ÅÁõÆÂΩï
         cd kernel_workspace/kernel_platform/common

         # ÊâßË°å defconfig
         make -j$(nproc) $MAKE_ARGS gki_defconfig

         # ÁºñËØëÂÖ®ÈÉ®ÁõÆÊ†á
         make -j$(nproc) $MAKE_ARGS all

         # ÂàõÂª∫ËæìÂá∫ÁõÆÂΩïÂπ∂Â§çÂà∂ Image
         mkdir -p ../dist
         cp out/arch/arm64/boot/Image ../dist/

      - name: È™åËØÅÂÜÖÊ†∏ÊûÑÂª∫Êó∂Èó¥
        run: |
         strings ${{ env.COMMON_DIR }}/out/vmlinux | grep "UTC"

      - name: Prepare AnyKernel3 package
        run: |
          cd ${{ env.KERNEL_PLATFORM }}/dist
          git clone https://github.com/3620603660/AnyKernel3.git AnyKernel3 --depth=1 # ‰ªÖÊãâÂèñÊúÄÊñ∞Êèê‰∫§
          rm -rf AnyKernel3/.git
          rm -f AnyKernel3/push.sh
          cp Image AnyKernel3/

      - name: Upload AnyKernel3 artifact
        uses: actions/upload-artifact@v4 # Êé®Ëçê‰ΩøÁî® v4 ÁâàÊú¨
        with:
          name: AnyKernel3_oneplus_ace5pro_${{ env.KSUVER }}
          path: ${{ env.KERNEL_PLATFORM }}/dist/AnyKernel3/*



