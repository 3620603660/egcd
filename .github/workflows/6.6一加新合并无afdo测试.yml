name: ace5pro_kernel_6.6合并100无afdo测试
on:
  workflow_dispatch:
    inputs:
      CPU_ARCH:
        description: "目标CPU架构分支,例如 sm8750 (默认: sm8750)"
        required: true
        default: 'sm8750'
      DEVICE_CONFIG:
        description: "设备配置文件名称,例如 oneplus_ace5_pro (默认: oneplus_ace5_pro)"
        required: true
        default: 'oneplus_ace5_pro'
      ANDROID_TARGET_VERSION:
        description: "目标Android版本,例如 android15 (默认: android15)"
        required: true
        default: 'android15'
      KERNEL_BASE_VERSION:
        description: "内核基础版本,例如 6.6.100 (默认: 6.6.100)"
        required: true
        default: '6.6'
      CUSTOM_KERNEL_NAME_TAG:
        description: "自定义内核名称标识,将附加到内核版本号后"
        required: true
        default: '-android15-8-g29d86c5fc9dd-abogki428889875-4k'
      LOCAL_VERSION_SUFFIX:
        description: '内核版本后缀(如-v8,默认:-4k)'
        required: false
        default: ''
        type: string
      REMOVE_DEFAULT_4K_SUFFIX:
        description: '是否删除默认的 -4k 后缀?(勾选则删除)'
        required: false
        default: true
        type: boolean
      BUILD_TIMESTAMP:
        description: '内核构建时间 (UTC格式,例如 "Tue Dec 17 23:36:49 UTC 2024")'
        required: false
        default: 'Tue Jul 1 19:48:18 UTC 2025'
        type: string

env:
  WORKSPACE_DIR: kernel_workspace
  KERNEL_PLATFORM_DIR: kernel_workspace/kernel_platform
  CCACHE_DIR: /home/runner/.ccache
  CCACHE_MAXSIZE: 12G  # 优化: 增大以提升命中率
  CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
  CCACHE_NOHASHDIR: "true"
  CCACHE_HARDLINK: "true"

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      TOKEN: ${{ secrets.TOKEN }}
    
    steps:
      - name: 1.1 最大化构建空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: 1.2 配置Git用户信息
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 1.3 检出工作流仓库代码  
        uses: actions/checkout@v4  

      - name: 1.4 安装构建核心依赖  
        run: |  
          sudo apt-get update  
          sudo apt-get install -y --no-install-recommends \
            python3 git curl ccache libelf-dev build-essential \
            bc bison flex libssl-dev libncurses5-dev

      - name: 2.1 恢复 ccache 缓存
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref_name }}-v3_pro
          restore-keys: |
            ${{ runner.os }}-${{ github.repository }}-${{ github.ref_name }}-ccache-
            ${{ runner.os }}-${{ github.repository }}-ccache-
            ${{ runner.os }}-ccache-
    
      - name: 2.2 配置 ccache
        run: |  
          echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV  
          echo "CCACHE_LOGFILE=${{ github.workspace }}/ccache.log" >> $GITHUB_ENV  
          echo "/usr/lib/ccache" >> $GITHUB_PATH  
         
      - name: 2.3 显示 ccache 统计信息
        run: |
          ccache -s || true
         
      - name: 3.1 安装 repo 工具
        run: |
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: 3.2 初始化并同步内核源码
        run: |
          mkdir -p ${{ env.WORKSPACE_DIR }} && cd ${{ env.WORKSPACE_DIR }}
          repo init -u https://github.com/3620603660/kernel_manifest.git \
            -b refs/heads/oneplus/${{ github.event.inputs.CPU_ARCH }} \
            -m ${{ github.event.inputs.DEVICE_CONFIG }}.xml --depth=1
          repo sync -c -j$(nproc) --no-tags --no-clone-bundle --optimized-fetch --force-sync  # 优化: 添加optimized-fetch提升效率
          
          # 清理不需要的文件
          rm -f kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports to remove."
          rm -f kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports to remove."

      - name: Set up SukiSU
        run: |
         cd kernel_workspace/kernel_platform
         curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main || { echo "SukiSU setup failed"; exit 1; }  # 优化: 添加错误退出
         cd ./KernelSU
         KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
         echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
         export KSU_VERSION=$KSU_VERSION
         sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
         KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10700)
         echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
         export KSU_VERSION=$KSU_VERSION

      - name: Set up SUSFS & apply patches
        run: |
         set -e
         
         cd kernel_workspace
         git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_TARGET_VERSION }}-${{ github.event.inputs.KERNEL_BASE_VERSION }}
         git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
         git clone https://$TOKEN@github.com/3620603660/boot.git
         cd kernel_platform
         cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_TARGET_VERSION }}-${{ github.event.inputs.KERNEL_BASE_VERSION }}.patch ./common/ || true
         mkdir -p ./common/fs ./common/include/linux ./common/lib ./common/crypto
         cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/ || true
         cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/ || true
         cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux || true
         cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib || true
         cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto || true
         cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/ || true
         cp ../boot/1.patch ./common/
         cd ./common
         PATCH_FILE=50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_TARGET_VERSION }}-${{ github.event.inputs.KERNEL_BASE_VERSION }}.patch
         if [[ -f "$PATCH_FILE" ]]; then
         # sed -i 's/-32,12 +32,38/-32,11 +32,37/g' "$PATCH_FILE"
         # sed -i '/#include <trace\/hooks\/fs.h>/d' "$PATCH_FILE"
         patch -p1 < "$PATCH_FILE" || true
         fi
         cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
         patch -p1 -F 3 < syscall_hooks.patch || true
         patch -s -p1 -F 3 < 1.patch
         echo "✅ SUSFS 和 syscall_hooks patch 应用完成"
         
      - name: Apply Hide Stuff Patches
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "正在打隐藏应用补丁"
          patch -p1 -F 3 < 69_hide_stuff.patch || { echo "Hide patch failed"; exit 1; }
          echo "隐藏应用_patch完成"

      - name: 🔧 Cache HMBird patch (缓存HMBird补丁)
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/hmbird_patch.c
          key: hmbird-patch-v1
          restore-keys: |
            hmbird-patch-v1
            
      
      - name: 🔧 Apply HMBird GKI patch (写入单Boot开机补丁)
        run: |
          PATCH_FILE="${{ runner.temp }}/hmbird_patch.c"
          if [ ! -f "$PATCH_FILE" ]; then
            echo "下载HMBird补丁..."
            cp "${GITHUB_WORKSPACE}/hmbird_patch.c" "$PATCH_FILE"
          fi
          
          cd kernel_workspace/kernel_platform/common/drivers
          cp "$PATCH_FILE" hmbird_patch.c
          
          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          echo "HMBird补丁应用完成"
         
      - name: 设置内核优化配置
        run: |  
          cd ${{ env.KERNEL_PLATFORM_DIR }}  
          
          CONFIG_FILE="./common/arch/arm64/configs/gki_defconfig"  
          
          if [ ! -f "$CONFIG_FILE" ]; then  
            echo "Error: 配置文件 $CONFIG_FILE 不存在"  
            exit 1  
          fi  
          
          cat >> "$CONFIG_FILE" << 'EOF'  
         
          # 优化后的一加Ace5 Pro (骁龙8 Elite, Android 15, Kernel 6.6.100) 内核配置

          # KernelSU 配置 (保持不变)
          CONFIG_KSU=y  
          CONFIG_KSU_SUSFS_SUS_SU=n  
          CONFIG_KSU_MANUAL_HOOK=y  
          CONFIG_KSU_SUSFS=y  
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y  
          CONFIG_KSU_SUSFS_SUS_PATH=y  
          CONFIG_KSU_SUSFS_SUS_MOUNT=y  
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y  
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y  
          CONFIG_KSU_SUSFS_SUS_KSTAT=y  
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n  
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y  
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y  
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y  
          CONFIG_KSU_SUSFS_ENABLE_LOG=y  
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y  
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y  

          # CPU和电源管理
          CONFIG_CPU_FREQ=y  
          CONFIG_CPU_FREQ_STAT=y  
          CONFIG_CPU_IDLE=y  
          CONFIG_PM_WAKELOCKS=y  
          CONFIG_PM_WAKELOCKS_GC=y  
          CONFIG_SCHED_CORE=y  
          CONFIG_SCHED_MC=y  
          CONFIG_UCLAMP_TASK=y  
          CONFIG_SCHED_HRTICK=y  
          CONFIG_CPU_IDLE_GOV_TEO=y  
          CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y  
          CONFIG_CPU_HOTPLUG=y  
          CONFIG_CPU_IDLE_STATE_RESIDENCY=y  
          CONFIG_CPU_IDLE_TIME_IN_ACCOUNTING=y  
          CONFIG_SCHED_CLASS_EXT=y  

          # 内存管理
          CONFIG_LRU_GEN=y  
          CONFIG_TRANSPARENT_HUGEPAGE=y  
          CONFIG_TRANSPARENT_HUGEPAGE_ALWAYS=n  
          CONFIG_TRANSPARENT_HUGEPAGE_MADVISE=y  
          CONFIG_ZRAM=y  
          CONFIG_ZRAM_LZ4=y  
          CONFIG_ZRAM_ZSTD=y  
          CONFIG_ANDROID_LOW_MEMORY_KILLER=y  

          # 网络性能优化 (BBR3)
          CONFIG_BQL=y  
          CONFIG_INET=y  
          CONFIG_IPV6=y  
          CONFIG_NET=y  
          CONFIG_NET_SCHED=y  
          CONFIG_NET_SCH_CAKE=y  
          CONFIG_NET_SCH_FQ=y  
          CONFIG_NET_SCH_FQ_CODEL=y  
          CONFIG_DEFAULT_NET_SCH="cake"  
          CONFIG_DEFAULT_TCP_CONG="bbr"  
          CONFIG_TCP_CONG_BBR=y  
          CONFIG_TCP_CONG_BIC=n  
          CONFIG_TCP_CONG_CUBIC=n  
          CONFIG_TCP_CONG_HTCP=n  
          CONFIG_TCP_CONG_WESTWOOD=n  
          CONFIG_TCP_FASTOPEN=y  
          CONFIG_TCP_SACK=y  
          CONFIG_TCP_TIMESTAMPS=y  

          # ADIOS和O2优化配置
          CONFIG_IO_URING=y  
          CONFIG_BLK_MQ=y  
          CONFIG_BLK_MQ_PCI=y  
          CONFIG_O2_OPTIMIZATION=y  
          CONFIG_MQ_IOSCHED_ADIOS=y  

          # 文件系统压缩支持
          CONFIG_F2FS_FS_LZ4=y  
          CONFIG_F2FS_FS_LZ4HC=y  
          CONFIG_F2FS_FS_ZSTD=y  

          # 编译优化
          CONFIG_LTO_CLANG=y  
          CONFIG_LTO_CLANG_THIN=y  
          CONFIG_LTO_POLLY=y  

          # Ace 5 Pro特定优化 (6.6.100兼容，优化: 添加NVMe target)
          CONFIG_NVME_MULTIPATH=y  
          CONFIG_NVME_TARGET=y  # 新增: 提升存储目标支持
          CONFIG_BT_QCA=y  
          CONFIG_ARM64_SME=n  
          CONFIG_PM_DOMAIN_CPU_GOV=y  
          
          EOF  
          
          sed -i 's/check_defconfig//' ./common/build.config.gki  
          
          git add -A && git commit -a -m "BUILD Kernel with optimizations" || true  
          
          echo "✅ 内核优化配置已完成"

      - name: 7.1 修改内核版本显示名称
        run: |
          cd ${{ env.KERNEL_PLATFORM_DIR }}
          sed -i '186s|echo ".*"|echo "${KERNELVERSION}${scm_version}${config_localversion}"|' common/scripts/setlocalversion
          sed -i "s/\${scm_version}/${{ github.event.inputs.CUSTOM_KERNEL_NAME_TAG }}/g" ./common/scripts/setlocalversion
         
      - name: 7.2 设置 CONFIG_LOCALVERSION
        run: |
          cd ${{ env.KERNEL_PLATFORM_DIR }}
          echo 'CONFIG_LOCALVERSION="${{ github.event.inputs.LOCAL_VERSION_SUFFIX }}"' >> ./common/arch/arm64/configs/gki_defconfig

      - name: 7.3 删除 CONFIG_LOCALVERSION 中的 -4k 后缀(如果勾选)
        if: ${{ fromJSON(github.event.inputs.REMOVE_DEFAULT_4K_SUFFIX) }}
        run: |
          cd ${{ env.KERNEL_PLATFORM_DIR }}
          sed -i 's/-4k//' ./common/arch/arm64/configs/gki_defconfig

      - name: 8.1 设置构建时间戳
        run: |         
          export SOURCE_DATE_EPOCH=$(date -d "${{ github.event.inputs.BUILD_TIMESTAMP }}" +%s)
          echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV
      
      - name: 9.1 安装和设置 Clang 19.0.0 编译器环境
        run: |
          mkdir -p clang19
          cd clang19
          wget -q https://github.com/ZyCromerZ/Clang/releases/download/19.0.0git-20240723-release/Clang-19.0.0git-20240723.tar.gz
          tar -zxf Clang-19.0.0git-20240723.tar.gz
          echo "CLANG_PATH=${{ github.workspace }}/clang19/bin" >> $GITHUB_ENV
          
      - name: 10.1 编译内核
        run: |
          # 设置编译环境
          export PATH="${{ env.CLANG_PATH }}:${PATH}"
          export PATH="/usr/lib/ccache:${PATH}"
          
          # 设置时间戳
          export KERNEL_TIME="${{ github.event.inputs.BUILD_TIMESTAMP }}"
          export KBUILD_BUILD_TIMESTAMP="$KERNEL_TIME"
          export SOURCE_DATE_EPOCH=${{ env.SOURCE_DATE_EPOCH }}

          # 设置编译参数 (优化: 针对骁龙8 Elite添加-march)
          export MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang \
          RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
          PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
          LD=ld.lld HOSTLD=ld.lld O=out SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH}"
          echo "Using SOURCE_DATE_EPOCH: $SOURCE_DATE_EPOCH"
          
          # 进入编译目录
          cd ${{ env.KERNEL_PLATFORM_DIR }}/common
          rm -rf out
          make $MAKE_ARGS clean || true  # 优化: 添加clean避免缓存污染
          
          # 开始编译
          echo "开始编译内核..."
          export KBUILD_CFLAGS="-O2 -fpolly -flto=thin -march=armv8.2-a"  # 优化: armv8.2针对SM8750
          make $MAKE_ARGS gki_defconfig
          make $MAKE_ARGS -j$(nproc)

          echo "✅ 内核编译完成"

      - name: 11.1 显示编译结果
        run: |
          cd ${{ env.KERNEL_PLATFORM_DIR }}/common
          if [ -f "out/arch/arm64/boot/Image" ]; then
            echo "✅ 内核镜像编译成功"
            ls -lh out/arch/arm64/boot/Image*
          else
            echo "❌ 内核镜像编译失败"
            exit 1
          fi

          mkdir -p ../dist
          cp out/arch/arm64/boot/Image ../dist/
          echo "✅ 内核编译成功!产物已复制到 dist 目录。"
          
      - name: 10.2 验证内核构建时间
        run: |
         strings kernel_workspace/kernel_platform/common/out/vmlinux | grep "UTC" || echo "时间戳验证通过"

      - name: 11.1 准备 AnyKernel3 刷机包
        run: |
          cd kernel_workspace/kernel_platform/dist
          git clone https://github.com/3620603660/AnyKernel3.git AnyKernel3 --depth=1
          rm -rf AnyKernel3/.git
          rm -f AnyKernel3/push.sh
          cp Image AnyKernel3/

      - name: 11.2 上传编译产物到 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_${{ github.event.inputs.DEVICE_CONFIG }}_${{ env.KSUVER }}
          path: kernel_workspace/kernel_platform/dist/AnyKernel3/*
          
      - name: 11.2 显示最终 ccache 统计信息
        run: |
          ccache -s
          echo "Cache hit rate: $(ccache -s | grep 'Cache hit rate' || echo 'N/A')"
